
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000974  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000b1c  08000b1c  00010b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b28  08000b28  00010b30  2**0
                  CONTENTS
  4 .ARM          00000000  08000b28  08000b28  00010b30  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000b28  08000b30  00010b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000b28  08000b28  00010b28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000b2c  08000b2c  00010b2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010b30  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010b30  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00010b30  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000122e  00000000  00000000  00010b5a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000041b  00000000  00000000  00011d88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000138  00000000  00000000  000121a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000100  00000000  00000000  000122e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000287b  00000000  00000000  000123e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00001b00  00000000  00000000  00014c5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009f7a  00000000  00000000  0001675b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000206d5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000042c  00000000  00000000  00020728  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000b04 	.word	0x08000b04

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000b04 	.word	0x08000b04

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <main>:
#include "stm32f407xx_spi.h"

void SPI2_GPIOInit(void);
void SPI2_Init(void);

int main (void) {
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b084      	sub	sp, #16
 80001fc:	af00      	add	r7, sp, #0

	char txData[] = "Hello World";
 80001fe:	4a10      	ldr	r2, [pc, #64]	; (8000240 <main+0x48>)
 8000200:	1d3b      	adds	r3, r7, #4
 8000202:	ca07      	ldmia	r2, {r0, r1, r2}
 8000204:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	// 1. Initialize GPIO for SPI2
	SPI2_GPIOInit();
 8000208:	f000 f81e 	bl	8000248 <SPI2_GPIOInit>

	SPI2_Init();
 800020c:	f000 f84a 	bl	80002a4 <SPI2_Init>

	SPI_SSIConfig(SPI2, ENABLE);		// pull-up to VCC the NSS signal and avoid MODF error
 8000210:	2101      	movs	r1, #1
 8000212:	480c      	ldr	r0, [pc, #48]	; (8000244 <main+0x4c>)
 8000214:	f000 fc36 	bl	8000a84 <SPI_SSIConfig>

	SPI_PeripheralControl(SPI2, ENABLE);
 8000218:	2101      	movs	r1, #1
 800021a:	480a      	ldr	r0, [pc, #40]	; (8000244 <main+0x4c>)
 800021c:	f000 fc17 	bl	8000a4e <SPI_PeripheralControl>

	SPI_SendData(SPI2, (uint8_t *)txData, strlen(txData));
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	4618      	mov	r0, r3
 8000224:	f7ff ffe0 	bl	80001e8 <strlen>
 8000228:	4602      	mov	r2, r0
 800022a:	1d3b      	adds	r3, r7, #4
 800022c:	4619      	mov	r1, r3
 800022e:	4805      	ldr	r0, [pc, #20]	; (8000244 <main+0x4c>)
 8000230:	f000 fbbf 	bl	80009b2 <SPI_SendData>

	SPI_PeripheralControl(SPI2, DISABLE);
 8000234:	2100      	movs	r1, #0
 8000236:	4803      	ldr	r0, [pc, #12]	; (8000244 <main+0x4c>)
 8000238:	f000 fc09 	bl	8000a4e <SPI_PeripheralControl>

	while (1);
 800023c:	e7fe      	b.n	800023c <main+0x44>
 800023e:	bf00      	nop
 8000240:	08000b1c 	.word	0x08000b1c
 8000244:	40003800 	.word	0x40003800

08000248 <SPI2_GPIOInit>:
}


void SPI2_GPIOInit(void) {
 8000248:	b580      	push	{r7, lr}
 800024a:	b084      	sub	sp, #16
 800024c:	af00      	add	r7, sp, #0

	GPIO_Handle_t SPI_Pins;

	SPI_Pins.pGPIOx = GPIOB;
 800024e:	4b14      	ldr	r3, [pc, #80]	; (80002a0 <SPI2_GPIOInit+0x58>)
 8000250:	607b      	str	r3, [r7, #4]

	SPI_Pins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_AF;
 8000252:	2302      	movs	r3, #2
 8000254:	727b      	strb	r3, [r7, #9]
	SPI_Pins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000256:	2305      	movs	r3, #5
 8000258:	737b      	strb	r3, [r7, #13]
	SPI_Pins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PP;
 800025a:	2300      	movs	r3, #0
 800025c:	733b      	strb	r3, [r7, #12]
	SPI_Pins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_NO;
 800025e:	2300      	movs	r3, #0
 8000260:	72fb      	strb	r3, [r7, #11]
	SPI_Pins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000262:	2302      	movs	r3, #2
 8000264:	72bb      	strb	r3, [r7, #10]

	SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;		// Config NSS
 8000266:	230c      	movs	r3, #12
 8000268:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_Pins);
 800026a:	1d3b      	adds	r3, r7, #4
 800026c:	4618      	mov	r0, r3
 800026e:	f000 f949 	bl	8000504 <GPIO_Init>

	SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_13;		// Config SCK
 8000272:	230d      	movs	r3, #13
 8000274:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_Pins);
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	4618      	mov	r0, r3
 800027a:	f000 f943 	bl	8000504 <GPIO_Init>

	SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_14;		// Config MISO
 800027e:	230e      	movs	r3, #14
 8000280:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_Pins);
 8000282:	1d3b      	adds	r3, r7, #4
 8000284:	4618      	mov	r0, r3
 8000286:	f000 f93d 	bl	8000504 <GPIO_Init>

	SPI_Pins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_15;		// Config MOSI
 800028a:	230f      	movs	r3, #15
 800028c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPI_Pins);
 800028e:	1d3b      	adds	r3, r7, #4
 8000290:	4618      	mov	r0, r3
 8000292:	f000 f937 	bl	8000504 <GPIO_Init>
}
 8000296:	bf00      	nop
 8000298:	3710      	adds	r7, #16
 800029a:	46bd      	mov	sp, r7
 800029c:	bd80      	pop	{r7, pc}
 800029e:	bf00      	nop
 80002a0:	40020400 	.word	0x40020400

080002a4 <SPI2_Init>:


void SPI2_Init(void) {
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2_Handle;

	SPI2_Handle.pSPIx = SPI2;
 80002aa:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <SPI2_Init+0x38>)
 80002ac:	607b      	str	r3, [r7, #4]

	SPI2_Handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FULL_DUPLEX;
 80002ae:	2301      	movs	r3, #1
 80002b0:	727b      	strb	r3, [r7, #9]
	SPI2_Handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 80002b2:	2301      	movs	r3, #1
 80002b4:	723b      	strb	r3, [r7, #8]
	SPI2_Handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;			// 8 MHz
 80002b6:	2300      	movs	r3, #0
 80002b8:	72bb      	strb	r3, [r7, #10]
	SPI2_Handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 80002ba:	2300      	movs	r3, #0
 80002bc:	72fb      	strb	r3, [r7, #11]
	SPI2_Handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 80002be:	2300      	movs	r3, #0
 80002c0:	733b      	strb	r3, [r7, #12]
	SPI2_Handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 80002c2:	2300      	movs	r3, #0
 80002c4:	737b      	strb	r3, [r7, #13]
	SPI2_Handle.SPIConfig.SPI_SSM = SPI_SSM_EN;
 80002c6:	2301      	movs	r3, #1
 80002c8:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2_Handle);
 80002ca:	1d3b      	adds	r3, r7, #4
 80002cc:	4618      	mov	r0, r3
 80002ce:	f000 fb15 	bl	80008fc <SPI_Init>
}
 80002d2:	bf00      	nop
 80002d4:	3710      	adds	r7, #16
 80002d6:	46bd      	mov	sp, r7
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	40003800 	.word	0x40003800

080002e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002e0:	480d      	ldr	r0, [pc, #52]	; (8000318 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002e8:	480c      	ldr	r0, [pc, #48]	; (800031c <LoopForever+0x6>)
  ldr r1, =_edata
 80002ea:	490d      	ldr	r1, [pc, #52]	; (8000320 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002ec:	4a0d      	ldr	r2, [pc, #52]	; (8000324 <LoopForever+0xe>)
  movs r3, #0
 80002ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002f0:	e002      	b.n	80002f8 <LoopCopyDataInit>

080002f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002f6:	3304      	adds	r3, #4

080002f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002fc:	d3f9      	bcc.n	80002f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002fe:	4a0a      	ldr	r2, [pc, #40]	; (8000328 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000300:	4c0a      	ldr	r4, [pc, #40]	; (800032c <LoopForever+0x16>)
  movs r3, #0
 8000302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000304:	e001      	b.n	800030a <LoopFillZerobss>

08000306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000308:	3204      	adds	r2, #4

0800030a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800030a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800030c:	d3fb      	bcc.n	8000306 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800030e:	f000 fbd5 	bl	8000abc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000312:	f7ff ff71 	bl	80001f8 <main>

08000316 <LoopForever>:

LoopForever:
    b LoopForever
 8000316:	e7fe      	b.n	8000316 <LoopForever>
  ldr   r0, =_estack
 8000318:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800031c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000320:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000324:	08000b30 	.word	0x08000b30
  ldr r2, =_sbss
 8000328:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800032c:	2000001c 	.word	0x2000001c

08000330 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000330:	e7fe      	b.n	8000330 <ADC_IRQHandler>
	...

08000334 <GPIO_PeriphClkCtrl>:
 *
 * @return			- none
 *
 * @Note			- none
*/
void GPIO_PeriphClkCtrl (GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi) {
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
 800033c:	460b      	mov	r3, r1
 800033e:	70fb      	strb	r3, [r7, #3]

	if (EnOrDi == ENABLE) {
 8000340:	78fb      	ldrb	r3, [r7, #3]
 8000342:	2b01      	cmp	r3, #1
 8000344:	d162      	bne.n	800040c <GPIO_PeriphClkCtrl+0xd8>
		if (pGPIOx == GPIOA) {
 8000346:	687b      	ldr	r3, [r7, #4]
 8000348:	4a64      	ldr	r2, [pc, #400]	; (80004dc <GPIO_PeriphClkCtrl+0x1a8>)
 800034a:	4293      	cmp	r3, r2
 800034c:	d106      	bne.n	800035c <GPIO_PeriphClkCtrl+0x28>
			GPIOA_PCLCK_EN();
 800034e:	4b64      	ldr	r3, [pc, #400]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 8000350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000352:	4a63      	ldr	r2, [pc, #396]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	6313      	str	r3, [r2, #48]	; 0x30
		}
		else if (pGPIOx == GPIOI) {
			GPIOI_PCLCK_DI();
		}
	}
}
 800035a:	e0b9      	b.n	80004d0 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOB) {
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	4a61      	ldr	r2, [pc, #388]	; (80004e4 <GPIO_PeriphClkCtrl+0x1b0>)
 8000360:	4293      	cmp	r3, r2
 8000362:	d106      	bne.n	8000372 <GPIO_PeriphClkCtrl+0x3e>
			GPIOB_PCLCK_EN();
 8000364:	4b5e      	ldr	r3, [pc, #376]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 8000366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000368:	4a5d      	ldr	r2, [pc, #372]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 800036a:	f043 0302 	orr.w	r3, r3, #2
 800036e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000370:	e0ae      	b.n	80004d0 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOC) {
 8000372:	687b      	ldr	r3, [r7, #4]
 8000374:	4a5c      	ldr	r2, [pc, #368]	; (80004e8 <GPIO_PeriphClkCtrl+0x1b4>)
 8000376:	4293      	cmp	r3, r2
 8000378:	d106      	bne.n	8000388 <GPIO_PeriphClkCtrl+0x54>
			GPIOC_PCLCK_EN();
 800037a:	4b59      	ldr	r3, [pc, #356]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 800037c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800037e:	4a58      	ldr	r2, [pc, #352]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 8000380:	f043 0304 	orr.w	r3, r3, #4
 8000384:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000386:	e0a3      	b.n	80004d0 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOD) {
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	4a58      	ldr	r2, [pc, #352]	; (80004ec <GPIO_PeriphClkCtrl+0x1b8>)
 800038c:	4293      	cmp	r3, r2
 800038e:	d106      	bne.n	800039e <GPIO_PeriphClkCtrl+0x6a>
			GPIOD_PCLCK_EN();
 8000390:	4b53      	ldr	r3, [pc, #332]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 8000392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000394:	4a52      	ldr	r2, [pc, #328]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 8000396:	f043 0308 	orr.w	r3, r3, #8
 800039a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800039c:	e098      	b.n	80004d0 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOE) {
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	4a53      	ldr	r2, [pc, #332]	; (80004f0 <GPIO_PeriphClkCtrl+0x1bc>)
 80003a2:	4293      	cmp	r3, r2
 80003a4:	d106      	bne.n	80003b4 <GPIO_PeriphClkCtrl+0x80>
			GPIOE_PCLCK_EN();
 80003a6:	4b4e      	ldr	r3, [pc, #312]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 80003a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003aa:	4a4d      	ldr	r2, [pc, #308]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 80003ac:	f043 0310 	orr.w	r3, r3, #16
 80003b0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003b2:	e08d      	b.n	80004d0 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOF) {
 80003b4:	687b      	ldr	r3, [r7, #4]
 80003b6:	4a4f      	ldr	r2, [pc, #316]	; (80004f4 <GPIO_PeriphClkCtrl+0x1c0>)
 80003b8:	4293      	cmp	r3, r2
 80003ba:	d106      	bne.n	80003ca <GPIO_PeriphClkCtrl+0x96>
			GPIOF_PCLCK_EN();
 80003bc:	4b48      	ldr	r3, [pc, #288]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 80003be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c0:	4a47      	ldr	r2, [pc, #284]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 80003c2:	f043 0320 	orr.w	r3, r3, #32
 80003c6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003c8:	e082      	b.n	80004d0 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOG) {
 80003ca:	687b      	ldr	r3, [r7, #4]
 80003cc:	4a4a      	ldr	r2, [pc, #296]	; (80004f8 <GPIO_PeriphClkCtrl+0x1c4>)
 80003ce:	4293      	cmp	r3, r2
 80003d0:	d106      	bne.n	80003e0 <GPIO_PeriphClkCtrl+0xac>
			GPIOG_PCLCK_EN();
 80003d2:	4b43      	ldr	r3, [pc, #268]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 80003d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003d6:	4a42      	ldr	r2, [pc, #264]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 80003d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003dc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003de:	e077      	b.n	80004d0 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOH) {
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	4a46      	ldr	r2, [pc, #280]	; (80004fc <GPIO_PeriphClkCtrl+0x1c8>)
 80003e4:	4293      	cmp	r3, r2
 80003e6:	d106      	bne.n	80003f6 <GPIO_PeriphClkCtrl+0xc2>
			GPIOH_PCLCK_EN();
 80003e8:	4b3d      	ldr	r3, [pc, #244]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 80003ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ec:	4a3c      	ldr	r2, [pc, #240]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 80003ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003f2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003f4:	e06c      	b.n	80004d0 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOI) {
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	4a41      	ldr	r2, [pc, #260]	; (8000500 <GPIO_PeriphClkCtrl+0x1cc>)
 80003fa:	4293      	cmp	r3, r2
 80003fc:	d168      	bne.n	80004d0 <GPIO_PeriphClkCtrl+0x19c>
			GPIOI_PCLCK_EN();
 80003fe:	4b38      	ldr	r3, [pc, #224]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 8000400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000402:	4a37      	ldr	r2, [pc, #220]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 8000404:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000408:	6313      	str	r3, [r2, #48]	; 0x30
}
 800040a:	e061      	b.n	80004d0 <GPIO_PeriphClkCtrl+0x19c>
		if (pGPIOx == GPIOA) {
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	4a33      	ldr	r2, [pc, #204]	; (80004dc <GPIO_PeriphClkCtrl+0x1a8>)
 8000410:	4293      	cmp	r3, r2
 8000412:	d106      	bne.n	8000422 <GPIO_PeriphClkCtrl+0xee>
			GPIOA_PCLCK_DI();
 8000414:	4b32      	ldr	r3, [pc, #200]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 8000416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000418:	4a31      	ldr	r2, [pc, #196]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 800041a:	f023 0301 	bic.w	r3, r3, #1
 800041e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000420:	e056      	b.n	80004d0 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOB) {
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	4a2f      	ldr	r2, [pc, #188]	; (80004e4 <GPIO_PeriphClkCtrl+0x1b0>)
 8000426:	4293      	cmp	r3, r2
 8000428:	d106      	bne.n	8000438 <GPIO_PeriphClkCtrl+0x104>
			GPIOB_PCLCK_DI();
 800042a:	4b2d      	ldr	r3, [pc, #180]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 800042c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800042e:	4a2c      	ldr	r2, [pc, #176]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 8000430:	f023 0302 	bic.w	r3, r3, #2
 8000434:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000436:	e04b      	b.n	80004d0 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOC) {
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	4a2b      	ldr	r2, [pc, #172]	; (80004e8 <GPIO_PeriphClkCtrl+0x1b4>)
 800043c:	4293      	cmp	r3, r2
 800043e:	d106      	bne.n	800044e <GPIO_PeriphClkCtrl+0x11a>
			GPIOC_PCLCK_DI();
 8000440:	4b27      	ldr	r3, [pc, #156]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 8000442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000444:	4a26      	ldr	r2, [pc, #152]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 8000446:	f023 0304 	bic.w	r3, r3, #4
 800044a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800044c:	e040      	b.n	80004d0 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOD) {
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	4a26      	ldr	r2, [pc, #152]	; (80004ec <GPIO_PeriphClkCtrl+0x1b8>)
 8000452:	4293      	cmp	r3, r2
 8000454:	d106      	bne.n	8000464 <GPIO_PeriphClkCtrl+0x130>
			GPIOD_PCLCK_DI();
 8000456:	4b22      	ldr	r3, [pc, #136]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 8000458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800045a:	4a21      	ldr	r2, [pc, #132]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 800045c:	f023 0308 	bic.w	r3, r3, #8
 8000460:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000462:	e035      	b.n	80004d0 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOE) {
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	4a22      	ldr	r2, [pc, #136]	; (80004f0 <GPIO_PeriphClkCtrl+0x1bc>)
 8000468:	4293      	cmp	r3, r2
 800046a:	d106      	bne.n	800047a <GPIO_PeriphClkCtrl+0x146>
			GPIOE_PCLCK_DI();
 800046c:	4b1c      	ldr	r3, [pc, #112]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 800046e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000470:	4a1b      	ldr	r2, [pc, #108]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 8000472:	f023 0310 	bic.w	r3, r3, #16
 8000476:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000478:	e02a      	b.n	80004d0 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOF) {
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	4a1d      	ldr	r2, [pc, #116]	; (80004f4 <GPIO_PeriphClkCtrl+0x1c0>)
 800047e:	4293      	cmp	r3, r2
 8000480:	d106      	bne.n	8000490 <GPIO_PeriphClkCtrl+0x15c>
			GPIOF_PCLCK_DI();
 8000482:	4b17      	ldr	r3, [pc, #92]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 8000484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000486:	4a16      	ldr	r2, [pc, #88]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 8000488:	f023 0320 	bic.w	r3, r3, #32
 800048c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800048e:	e01f      	b.n	80004d0 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOG) {
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	4a19      	ldr	r2, [pc, #100]	; (80004f8 <GPIO_PeriphClkCtrl+0x1c4>)
 8000494:	4293      	cmp	r3, r2
 8000496:	d106      	bne.n	80004a6 <GPIO_PeriphClkCtrl+0x172>
			GPIOG_PCLCK_DI();
 8000498:	4b11      	ldr	r3, [pc, #68]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 800049a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800049c:	4a10      	ldr	r2, [pc, #64]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 800049e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80004a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004a4:	e014      	b.n	80004d0 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOH) {
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	4a14      	ldr	r2, [pc, #80]	; (80004fc <GPIO_PeriphClkCtrl+0x1c8>)
 80004aa:	4293      	cmp	r3, r2
 80004ac:	d106      	bne.n	80004bc <GPIO_PeriphClkCtrl+0x188>
			GPIOH_PCLCK_DI();
 80004ae:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 80004b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004b2:	4a0b      	ldr	r2, [pc, #44]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 80004b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ba:	e009      	b.n	80004d0 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOI) {
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	4a10      	ldr	r2, [pc, #64]	; (8000500 <GPIO_PeriphClkCtrl+0x1cc>)
 80004c0:	4293      	cmp	r3, r2
 80004c2:	d105      	bne.n	80004d0 <GPIO_PeriphClkCtrl+0x19c>
			GPIOI_PCLCK_DI();
 80004c4:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 80004c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004c8:	4a05      	ldr	r2, [pc, #20]	; (80004e0 <GPIO_PeriphClkCtrl+0x1ac>)
 80004ca:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004d0:	bf00      	nop
 80004d2:	370c      	adds	r7, #12
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bc80      	pop	{r7}
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop
 80004dc:	40020000 	.word	0x40020000
 80004e0:	40023800 	.word	0x40023800
 80004e4:	40020400 	.word	0x40020400
 80004e8:	40020800 	.word	0x40020800
 80004ec:	40020c00 	.word	0x40020c00
 80004f0:	40021000 	.word	0x40021000
 80004f4:	40021400 	.word	0x40021400
 80004f8:	40021800 	.word	0x40021800
 80004fc:	40021c00 	.word	0x40021c00
 8000500:	40022000 	.word	0x40022000

08000504 <GPIO_Init>:
 *
 * @return			- none
 *
 * @Note			- none
*/
void GPIO_Init (GPIO_Handle_t *pGPIOHandle) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b086      	sub	sp, #24
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	617b      	str	r3, [r7, #20]

	// Enable clock
	GPIO_PeriphClkCtrl(pGPIOHandle->pGPIOx, ENABLE);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	2101      	movs	r1, #1
 8000516:	4618      	mov	r0, r3
 8000518:	f7ff ff0c 	bl	8000334 <GPIO_PeriphClkCtrl>

	// 1. Configure GPIO pin mode
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	795b      	ldrb	r3, [r3, #5]
 8000520:	2b03      	cmp	r3, #3
 8000522:	d822      	bhi.n	800056a <GPIO_Init+0x66>
		// Non-interupt mode

		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << ( 2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));		// Get the mode and the pin number
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	795b      	ldrb	r3, [r3, #5]
 8000528:	461a      	mov	r2, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	791b      	ldrb	r3, [r3, #4]
 800052e:	005b      	lsls	r3, r3, #1
 8000530:	fa02 f303 	lsl.w	r3, r2, r3
 8000534:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );					// Clear bits
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	791b      	ldrb	r3, [r3, #4]
 8000540:	005b      	lsls	r3, r3, #1
 8000542:	2103      	movs	r1, #3
 8000544:	fa01 f303 	lsl.w	r3, r1, r3
 8000548:	43db      	mvns	r3, r3
 800054a:	4619      	mov	r1, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	400a      	ands	r2, r1
 8000552:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;																			// Store the value of temp in the mode register
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	6819      	ldr	r1, [r3, #0]
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	697a      	ldr	r2, [r7, #20]
 8000560:	430a      	orrs	r2, r1
 8000562:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	617b      	str	r3, [r7, #20]
 8000568:	e0c8      	b.n	80006fc <GPIO_Init+0x1f8>
	}
	else {
		// Interupt mode
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT) {
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	795b      	ldrb	r3, [r3, #5]
 800056e:	2b04      	cmp	r3, #4
 8000570:	d117      	bne.n	80005a2 <GPIO_Init+0x9e>
			// 1. Configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000572:	4b47      	ldr	r3, [pc, #284]	; (8000690 <GPIO_Init+0x18c>)
 8000574:	68db      	ldr	r3, [r3, #12]
 8000576:	687a      	ldr	r2, [r7, #4]
 8000578:	7912      	ldrb	r2, [r2, #4]
 800057a:	4611      	mov	r1, r2
 800057c:	2201      	movs	r2, #1
 800057e:	408a      	lsls	r2, r1
 8000580:	4611      	mov	r1, r2
 8000582:	4a43      	ldr	r2, [pc, #268]	; (8000690 <GPIO_Init+0x18c>)
 8000584:	430b      	orrs	r3, r1
 8000586:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		// Clear corresponding RTSR bit
 8000588:	4b41      	ldr	r3, [pc, #260]	; (8000690 <GPIO_Init+0x18c>)
 800058a:	689b      	ldr	r3, [r3, #8]
 800058c:	687a      	ldr	r2, [r7, #4]
 800058e:	7912      	ldrb	r2, [r2, #4]
 8000590:	4611      	mov	r1, r2
 8000592:	2201      	movs	r2, #1
 8000594:	408a      	lsls	r2, r1
 8000596:	43d2      	mvns	r2, r2
 8000598:	4611      	mov	r1, r2
 800059a:	4a3d      	ldr	r2, [pc, #244]	; (8000690 <GPIO_Init+0x18c>)
 800059c:	400b      	ands	r3, r1
 800059e:	6093      	str	r3, [r2, #8]
 80005a0:	e035      	b.n	800060e <GPIO_Init+0x10a>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT) {
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	795b      	ldrb	r3, [r3, #5]
 80005a6:	2b05      	cmp	r3, #5
 80005a8:	d117      	bne.n	80005da <GPIO_Init+0xd6>
			// 1. Configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005aa:	4b39      	ldr	r3, [pc, #228]	; (8000690 <GPIO_Init+0x18c>)
 80005ac:	689b      	ldr	r3, [r3, #8]
 80005ae:	687a      	ldr	r2, [r7, #4]
 80005b0:	7912      	ldrb	r2, [r2, #4]
 80005b2:	4611      	mov	r1, r2
 80005b4:	2201      	movs	r2, #1
 80005b6:	408a      	lsls	r2, r1
 80005b8:	4611      	mov	r1, r2
 80005ba:	4a35      	ldr	r2, [pc, #212]	; (8000690 <GPIO_Init+0x18c>)
 80005bc:	430b      	orrs	r3, r1
 80005be:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		// Clear correspongind FTSR bit
 80005c0:	4b33      	ldr	r3, [pc, #204]	; (8000690 <GPIO_Init+0x18c>)
 80005c2:	68db      	ldr	r3, [r3, #12]
 80005c4:	687a      	ldr	r2, [r7, #4]
 80005c6:	7912      	ldrb	r2, [r2, #4]
 80005c8:	4611      	mov	r1, r2
 80005ca:	2201      	movs	r2, #1
 80005cc:	408a      	lsls	r2, r1
 80005ce:	43d2      	mvns	r2, r2
 80005d0:	4611      	mov	r1, r2
 80005d2:	4a2f      	ldr	r2, [pc, #188]	; (8000690 <GPIO_Init+0x18c>)
 80005d4:	400b      	ands	r3, r1
 80005d6:	60d3      	str	r3, [r2, #12]
 80005d8:	e019      	b.n	800060e <GPIO_Init+0x10a>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT) {
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	795b      	ldrb	r3, [r3, #5]
 80005de:	2b06      	cmp	r3, #6
 80005e0:	d115      	bne.n	800060e <GPIO_Init+0x10a>
			// 1. Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005e2:	4b2b      	ldr	r3, [pc, #172]	; (8000690 <GPIO_Init+0x18c>)
 80005e4:	68db      	ldr	r3, [r3, #12]
 80005e6:	687a      	ldr	r2, [r7, #4]
 80005e8:	7912      	ldrb	r2, [r2, #4]
 80005ea:	4611      	mov	r1, r2
 80005ec:	2201      	movs	r2, #1
 80005ee:	408a      	lsls	r2, r1
 80005f0:	4611      	mov	r1, r2
 80005f2:	4a27      	ldr	r2, [pc, #156]	; (8000690 <GPIO_Init+0x18c>)
 80005f4:	430b      	orrs	r3, r1
 80005f6:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005f8:	4b25      	ldr	r3, [pc, #148]	; (8000690 <GPIO_Init+0x18c>)
 80005fa:	689b      	ldr	r3, [r3, #8]
 80005fc:	687a      	ldr	r2, [r7, #4]
 80005fe:	7912      	ldrb	r2, [r2, #4]
 8000600:	4611      	mov	r1, r2
 8000602:	2201      	movs	r2, #1
 8000604:	408a      	lsls	r2, r1
 8000606:	4611      	mov	r1, r2
 8000608:	4a21      	ldr	r2, [pc, #132]	; (8000690 <GPIO_Init+0x18c>)
 800060a:	430b      	orrs	r3, r1
 800060c:	6093      	str	r3, [r2, #8]

		// 2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t exti_temp1, exti_temp2;
		uint8_t portcode;

		exti_temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	791b      	ldrb	r3, [r3, #4]
 8000612:	089b      	lsrs	r3, r3, #2
 8000614:	74fb      	strb	r3, [r7, #19]
		exti_temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	791b      	ldrb	r3, [r3, #4]
 800061a:	f003 0303 	and.w	r3, r3, #3
 800061e:	74bb      	strb	r3, [r7, #18]
		portcode = GPIO_BASE_ADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	4a1b      	ldr	r2, [pc, #108]	; (8000694 <GPIO_Init+0x190>)
 8000626:	4293      	cmp	r3, r2
 8000628:	d044      	beq.n	80006b4 <GPIO_Init+0x1b0>
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	4a1a      	ldr	r2, [pc, #104]	; (8000698 <GPIO_Init+0x194>)
 8000630:	4293      	cmp	r3, r2
 8000632:	d02b      	beq.n	800068c <GPIO_Init+0x188>
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	4a18      	ldr	r2, [pc, #96]	; (800069c <GPIO_Init+0x198>)
 800063a:	4293      	cmp	r3, r2
 800063c:	d024      	beq.n	8000688 <GPIO_Init+0x184>
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4a17      	ldr	r2, [pc, #92]	; (80006a0 <GPIO_Init+0x19c>)
 8000644:	4293      	cmp	r3, r2
 8000646:	d01d      	beq.n	8000684 <GPIO_Init+0x180>
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a15      	ldr	r2, [pc, #84]	; (80006a4 <GPIO_Init+0x1a0>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d016      	beq.n	8000680 <GPIO_Init+0x17c>
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	4a14      	ldr	r2, [pc, #80]	; (80006a8 <GPIO_Init+0x1a4>)
 8000658:	4293      	cmp	r3, r2
 800065a:	d00f      	beq.n	800067c <GPIO_Init+0x178>
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	4a12      	ldr	r2, [pc, #72]	; (80006ac <GPIO_Init+0x1a8>)
 8000662:	4293      	cmp	r3, r2
 8000664:	d008      	beq.n	8000678 <GPIO_Init+0x174>
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	4a11      	ldr	r2, [pc, #68]	; (80006b0 <GPIO_Init+0x1ac>)
 800066c:	4293      	cmp	r3, r2
 800066e:	d101      	bne.n	8000674 <GPIO_Init+0x170>
 8000670:	2307      	movs	r3, #7
 8000672:	e020      	b.n	80006b6 <GPIO_Init+0x1b2>
 8000674:	2308      	movs	r3, #8
 8000676:	e01e      	b.n	80006b6 <GPIO_Init+0x1b2>
 8000678:	2306      	movs	r3, #6
 800067a:	e01c      	b.n	80006b6 <GPIO_Init+0x1b2>
 800067c:	2305      	movs	r3, #5
 800067e:	e01a      	b.n	80006b6 <GPIO_Init+0x1b2>
 8000680:	2304      	movs	r3, #4
 8000682:	e018      	b.n	80006b6 <GPIO_Init+0x1b2>
 8000684:	2303      	movs	r3, #3
 8000686:	e016      	b.n	80006b6 <GPIO_Init+0x1b2>
 8000688:	2302      	movs	r3, #2
 800068a:	e014      	b.n	80006b6 <GPIO_Init+0x1b2>
 800068c:	2301      	movs	r3, #1
 800068e:	e012      	b.n	80006b6 <GPIO_Init+0x1b2>
 8000690:	40013c00 	.word	0x40013c00
 8000694:	40020000 	.word	0x40020000
 8000698:	40020400 	.word	0x40020400
 800069c:	40020800 	.word	0x40020800
 80006a0:	40020c00 	.word	0x40020c00
 80006a4:	40021000 	.word	0x40021000
 80006a8:	40021400 	.word	0x40021400
 80006ac:	40021800 	.word	0x40021800
 80006b0:	40021c00 	.word	0x40021c00
 80006b4:	2300      	movs	r3, #0
 80006b6:	747b      	strb	r3, [r7, #17]

		SYSCFG_PCLK_EN();
 80006b8:	4b61      	ldr	r3, [pc, #388]	; (8000840 <GPIO_Init+0x33c>)
 80006ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006bc:	4a60      	ldr	r2, [pc, #384]	; (8000840 <GPIO_Init+0x33c>)
 80006be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c2:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[exti_temp1] |= portcode << (4*exti_temp2);
 80006c4:	4a5f      	ldr	r2, [pc, #380]	; (8000844 <GPIO_Init+0x340>)
 80006c6:	7cfb      	ldrb	r3, [r7, #19]
 80006c8:	3302      	adds	r3, #2
 80006ca:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006ce:	7c79      	ldrb	r1, [r7, #17]
 80006d0:	7cbb      	ldrb	r3, [r7, #18]
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	fa01 f303 	lsl.w	r3, r1, r3
 80006d8:	4618      	mov	r0, r3
 80006da:	495a      	ldr	r1, [pc, #360]	; (8000844 <GPIO_Init+0x340>)
 80006dc:	7cfb      	ldrb	r3, [r7, #19]
 80006de:	4302      	orrs	r2, r0
 80006e0:	3302      	adds	r3, #2
 80006e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006e6:	4b58      	ldr	r3, [pc, #352]	; (8000848 <GPIO_Init+0x344>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	687a      	ldr	r2, [r7, #4]
 80006ec:	7912      	ldrb	r2, [r2, #4]
 80006ee:	4611      	mov	r1, r2
 80006f0:	2201      	movs	r2, #1
 80006f2:	408a      	lsls	r2, r1
 80006f4:	4611      	mov	r1, r2
 80006f6:	4a54      	ldr	r2, [pc, #336]	; (8000848 <GPIO_Init+0x344>)
 80006f8:	430b      	orrs	r3, r1
 80006fa:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]

	// 2. Configure GPIO speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));		// Get the speed and pin number
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	799b      	ldrb	r3, [r3, #6]
 8000704:	461a      	mov	r2, r3
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	791b      	ldrb	r3, [r3, #4]
 800070a:	005b      	lsls	r3, r3, #1
 800070c:	fa02 f303 	lsl.w	r3, r2, r3
 8000710:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );						// Clear bits
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	689a      	ldr	r2, [r3, #8]
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	791b      	ldrb	r3, [r3, #4]
 800071c:	4619      	mov	r1, r3
 800071e:	2303      	movs	r3, #3
 8000720:	408b      	lsls	r3, r1
 8000722:	43db      	mvns	r3, r3
 8000724:	4619      	mov	r1, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	400a      	ands	r2, r1
 800072c:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;																		// Store the value of temp in the speed register
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	6899      	ldr	r1, [r3, #8]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	697a      	ldr	r2, [r7, #20]
 800073a:	430a      	orrs	r2, r1
 800073c:	609a      	str	r2, [r3, #8]
	temp = 0;
 800073e:	2300      	movs	r3, #0
 8000740:	617b      	str	r3, [r7, #20]

	// 3. Configure GPIO pull-up/pull-down
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));		// Get PuPd and pin number
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	79db      	ldrb	r3, [r3, #7]
 8000746:	461a      	mov	r2, r3
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	791b      	ldrb	r3, [r3, #4]
 800074c:	005b      	lsls	r3, r3, #1
 800074e:	fa02 f303 	lsl.w	r3, r2, r3
 8000752:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );							// Clear bits
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	68da      	ldr	r2, [r3, #12]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	791b      	ldrb	r3, [r3, #4]
 800075e:	005b      	lsls	r3, r3, #1
 8000760:	2103      	movs	r1, #3
 8000762:	fa01 f303 	lsl.w	r3, r1, r3
 8000766:	43db      	mvns	r3, r3
 8000768:	4619      	mov	r1, r3
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	400a      	ands	r2, r1
 8000770:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;																					// Store the value of temp in pull-up/pull-down register
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	68d9      	ldr	r1, [r3, #12]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	697a      	ldr	r2, [r7, #20]
 800077e:	430a      	orrs	r2, r1
 8000780:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]

	// 4. Configure output type register
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );		// Get output type and pin number
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	7a1b      	ldrb	r3, [r3, #8]
 800078a:	461a      	mov	r2, r3
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	791b      	ldrb	r3, [r3, #4]
 8000790:	fa02 f303 	lsl.w	r3, r2, r3
 8000794:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );					// Clear bits
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	685a      	ldr	r2, [r3, #4]
 800079c:	687b      	ldr	r3, [r7, #4]
 800079e:	791b      	ldrb	r3, [r3, #4]
 80007a0:	4619      	mov	r1, r3
 80007a2:	2301      	movs	r3, #1
 80007a4:	408b      	lsls	r3, r1
 80007a6:	43db      	mvns	r3, r3
 80007a8:	4619      	mov	r1, r3
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	400a      	ands	r2, r1
 80007b0:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;																	// Store the values of temp in output type register
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	6859      	ldr	r1, [r3, #4]
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	697a      	ldr	r2, [r7, #20]
 80007be:	430a      	orrs	r2, r1
 80007c0:	605a      	str	r2, [r3, #4]
	temp = 0;
 80007c2:	2300      	movs	r3, #0
 80007c4:	617b      	str	r3, [r7, #20]

	// 5. Configure alternate function register
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_AF) {
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	795b      	ldrb	r3, [r3, #5]
 80007ca:	2b02      	cmp	r3, #2
 80007cc:	d133      	bne.n	8000836 <GPIO_Init+0x332>
		uint8_t temp1, temp2 = 0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	743b      	strb	r3, [r7, #16]

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;												// Get the register 0 (AFL) or 1 (AFH)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	791b      	ldrb	r3, [r3, #4]
 80007d6:	08db      	lsrs	r3, r3, #3
 80007d8:	73fb      	strb	r3, [r7, #15]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;												// Get the pin number
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	791b      	ldrb	r3, [r3, #4]
 80007de:	f003 0307 	and.w	r3, r3, #7
 80007e2:	743b      	strb	r3, [r7, #16]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~( 0xF << (4*temp2) );													// Clear bits
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	7bfa      	ldrb	r2, [r7, #15]
 80007ea:	3208      	adds	r2, #8
 80007ec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007f0:	7c3b      	ldrb	r3, [r7, #16]
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	220f      	movs	r2, #15
 80007f6:	fa02 f303 	lsl.w	r3, r2, r3
 80007fa:	43db      	mvns	r3, r3
 80007fc:	4618      	mov	r0, r3
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	7bfa      	ldrb	r2, [r7, #15]
 8000804:	4001      	ands	r1, r0
 8000806:	3208      	adds	r2, #8
 8000808:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));	// Store the values in temp2 in register[temp1]
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	7bfa      	ldrb	r2, [r7, #15]
 8000812:	3208      	adds	r2, #8
 8000814:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	7a5b      	ldrb	r3, [r3, #9]
 800081c:	461a      	mov	r2, r3
 800081e:	7c3b      	ldrb	r3, [r7, #16]
 8000820:	009b      	lsls	r3, r3, #2
 8000822:	fa02 f303 	lsl.w	r3, r2, r3
 8000826:	4618      	mov	r0, r3
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	681b      	ldr	r3, [r3, #0]
 800082c:	7bfa      	ldrb	r2, [r7, #15]
 800082e:	4301      	orrs	r1, r0
 8000830:	3208      	adds	r2, #8
 8000832:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
	else {
		// nothing to be done
	}
}
 8000836:	bf00      	nop
 8000838:	3718      	adds	r7, #24
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	bf00      	nop
 8000840:	40023800 	.word	0x40023800
 8000844:	40013800 	.word	0x40013800
 8000848:	40013c00 	.word	0x40013c00

0800084c <SPI_PeriphClkCtrl>:
 *
 * @return			- none
 *
 * @Note			- none
*/
void SPI_PeriphClkCtrl (SPI_RegDef_t *pSPIx, uint8_t EnOrDi) {
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	460b      	mov	r3, r1
 8000856:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 8000858:	78fb      	ldrb	r3, [r7, #3]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d120      	bne.n	80008a0 <SPI_PeriphClkCtrl+0x54>
		if (pSPIx == SPI1) {
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4a22      	ldr	r2, [pc, #136]	; (80008ec <SPI_PeriphClkCtrl+0xa0>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d106      	bne.n	8000874 <SPI_PeriphClkCtrl+0x28>
			SPI1_PCLK_EN();
 8000866:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <SPI_PeriphClkCtrl+0xa4>)
 8000868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800086a:	4a21      	ldr	r2, [pc, #132]	; (80008f0 <SPI_PeriphClkCtrl+0xa4>)
 800086c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000870:	6453      	str	r3, [r2, #68]	; 0x44
		}
		else if (pSPIx == SPI3) {
			SPI3_PCLK_DI();
		}
	}
}
 8000872:	e035      	b.n	80008e0 <SPI_PeriphClkCtrl+0x94>
		else if (pSPIx == SPI2) {
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	4a1f      	ldr	r2, [pc, #124]	; (80008f4 <SPI_PeriphClkCtrl+0xa8>)
 8000878:	4293      	cmp	r3, r2
 800087a:	d106      	bne.n	800088a <SPI_PeriphClkCtrl+0x3e>
			SPI2_PCLK_EN();
 800087c:	4b1c      	ldr	r3, [pc, #112]	; (80008f0 <SPI_PeriphClkCtrl+0xa4>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000880:	4a1b      	ldr	r2, [pc, #108]	; (80008f0 <SPI_PeriphClkCtrl+0xa4>)
 8000882:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000886:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000888:	e02a      	b.n	80008e0 <SPI_PeriphClkCtrl+0x94>
		else if (pSPIx == SPI3) {
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4a1a      	ldr	r2, [pc, #104]	; (80008f8 <SPI_PeriphClkCtrl+0xac>)
 800088e:	4293      	cmp	r3, r2
 8000890:	d126      	bne.n	80008e0 <SPI_PeriphClkCtrl+0x94>
			SPI3_PCLK_EN();
 8000892:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <SPI_PeriphClkCtrl+0xa4>)
 8000894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000896:	4a16      	ldr	r2, [pc, #88]	; (80008f0 <SPI_PeriphClkCtrl+0xa4>)
 8000898:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800089c:	6413      	str	r3, [r2, #64]	; 0x40
}
 800089e:	e01f      	b.n	80008e0 <SPI_PeriphClkCtrl+0x94>
		if (pSPIx == SPI1) {
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4a12      	ldr	r2, [pc, #72]	; (80008ec <SPI_PeriphClkCtrl+0xa0>)
 80008a4:	4293      	cmp	r3, r2
 80008a6:	d106      	bne.n	80008b6 <SPI_PeriphClkCtrl+0x6a>
			SPI1_PCLK_DI();
 80008a8:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <SPI_PeriphClkCtrl+0xa4>)
 80008aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ac:	4a10      	ldr	r2, [pc, #64]	; (80008f0 <SPI_PeriphClkCtrl+0xa4>)
 80008ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80008b2:	6453      	str	r3, [r2, #68]	; 0x44
}
 80008b4:	e014      	b.n	80008e0 <SPI_PeriphClkCtrl+0x94>
		else if (pSPIx == SPI2) {
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4a0e      	ldr	r2, [pc, #56]	; (80008f4 <SPI_PeriphClkCtrl+0xa8>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d106      	bne.n	80008cc <SPI_PeriphClkCtrl+0x80>
			SPI2_PCLK_DI();
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <SPI_PeriphClkCtrl+0xa4>)
 80008c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008c2:	4a0b      	ldr	r2, [pc, #44]	; (80008f0 <SPI_PeriphClkCtrl+0xa4>)
 80008c4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80008c8:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008ca:	e009      	b.n	80008e0 <SPI_PeriphClkCtrl+0x94>
		else if (pSPIx == SPI3) {
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	4a0a      	ldr	r2, [pc, #40]	; (80008f8 <SPI_PeriphClkCtrl+0xac>)
 80008d0:	4293      	cmp	r3, r2
 80008d2:	d105      	bne.n	80008e0 <SPI_PeriphClkCtrl+0x94>
			SPI3_PCLK_DI();
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <SPI_PeriphClkCtrl+0xa4>)
 80008d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d8:	4a05      	ldr	r2, [pc, #20]	; (80008f0 <SPI_PeriphClkCtrl+0xa4>)
 80008da:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80008de:	6413      	str	r3, [r2, #64]	; 0x40
}
 80008e0:	bf00      	nop
 80008e2:	370c      	adds	r7, #12
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bc80      	pop	{r7}
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	40013000 	.word	0x40013000
 80008f0:	40023800 	.word	0x40023800
 80008f4:	40003800 	.word	0x40003800
 80008f8:	40003c00 	.word	0x40003c00

080008fc <SPI_Init>:
 *
 * @return			- none
 *
 * @Note			- none
*/
void SPI_Init (SPI_Handle_t *pSPIHandle) {
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]

	uint32_t tempreg = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	60fb      	str	r3, [r7, #12]

	// Enable clock
	SPI_PeriphClkCtrl(pSPIHandle->pSPIx, ENABLE);
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	2101      	movs	r1, #1
 800090e:	4618      	mov	r0, r3
 8000910:	f7ff ff9c 	bl	800084c <SPI_PeriphClkCtrl>

	// 1. Configure Device Mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << 2;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	791b      	ldrb	r3, [r3, #4]
 8000918:	009b      	lsls	r3, r3, #2
 800091a:	461a      	mov	r2, r3
 800091c:	68fb      	ldr	r3, [r7, #12]
 800091e:	4313      	orrs	r3, r2
 8000920:	60fb      	str	r3, [r7, #12]

	// 2. Configure Bus Config
	if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FULL_DUPLEX) {
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	795b      	ldrb	r3, [r3, #5]
 8000926:	2b01      	cmp	r3, #1
 8000928:	d104      	bne.n	8000934 <SPI_Init+0x38>
		tempreg &= ~(1 << 15); 						// Clear BIDIMODE
 800092a:	68fb      	ldr	r3, [r7, #12]
 800092c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	e014      	b.n	800095e <SPI_Init+0x62>
	}
	else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HALF_DUPLEX) {
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	795b      	ldrb	r3, [r3, #5]
 8000938:	2b02      	cmp	r3, #2
 800093a:	d104      	bne.n	8000946 <SPI_Init+0x4a>
		tempreg |= (1 << 15);						// Set BIDIMODE
 800093c:	68fb      	ldr	r3, [r7, #12]
 800093e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	e00b      	b.n	800095e <SPI_Init+0x62>
	}
	else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY) {
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	795b      	ldrb	r3, [r3, #5]
 800094a:	2b03      	cmp	r3, #3
 800094c:	d107      	bne.n	800095e <SPI_Init+0x62>
		tempreg &= ~(1 << 15);						// Clear BIDIMODE
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000954:	60fb      	str	r3, [r7, #12]
		tempreg |= (1 << 10);						// Set RXONLY bit
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800095c:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure Serial Clock Speed (BaudRate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	799b      	ldrb	r3, [r3, #6]
 8000962:	00db      	lsls	r3, r3, #3
 8000964:	461a      	mov	r2, r3
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	4313      	orrs	r3, r2
 800096a:	60fb      	str	r3, [r7, #12]

	// 4. Configure DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	79db      	ldrb	r3, [r3, #7]
 8000970:	02db      	lsls	r3, r3, #11
 8000972:	461a      	mov	r2, r3
 8000974:	68fb      	ldr	r3, [r7, #12]
 8000976:	4313      	orrs	r3, r2
 8000978:	60fb      	str	r3, [r7, #12]

	// 5. Configure CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 800097a:	687b      	ldr	r3, [r7, #4]
 800097c:	7a1b      	ldrb	r3, [r3, #8]
 800097e:	005b      	lsls	r3, r3, #1
 8000980:	461a      	mov	r2, r3
 8000982:	68fb      	ldr	r3, [r7, #12]
 8000984:	4313      	orrs	r3, r2
 8000986:	60fb      	str	r3, [r7, #12]

	// 6. Configure CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	7a5b      	ldrb	r3, [r3, #9]
 800098c:	461a      	mov	r2, r3
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	4313      	orrs	r3, r2
 8000992:	60fb      	str	r3, [r7, #12]

	// 7. Configure SSM
	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	7a9b      	ldrb	r3, [r3, #10]
 8000998:	025b      	lsls	r3, r3, #9
 800099a:	461a      	mov	r2, r3
 800099c:	68fb      	ldr	r3, [r7, #12]
 800099e:	4313      	orrs	r3, r2
 80009a0:	60fb      	str	r3, [r7, #12]

	// 8. Configure CR1 register
	pSPIHandle->pSPIx->CR1 = tempreg;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	68fa      	ldr	r2, [r7, #12]
 80009a8:	601a      	str	r2, [r3, #0]
}
 80009aa:	bf00      	nop
 80009ac:	3710      	adds	r7, #16
 80009ae:	46bd      	mov	sp, r7
 80009b0:	bd80      	pop	{r7, pc}

080009b2 <SPI_SendData>:
 *
 * @return			- none
 *
 * @Note			- Blocking mode API (polling API)
*/
void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len) {
 80009b2:	b580      	push	{r7, lr}
 80009b4:	b084      	sub	sp, #16
 80009b6:	af00      	add	r7, sp, #0
 80009b8:	60f8      	str	r0, [r7, #12]
 80009ba:	60b9      	str	r1, [r7, #8]
 80009bc:	607a      	str	r2, [r7, #4]

	while (Len > 0) {
 80009be:	e028      	b.n	8000a12 <SPI_SendData+0x60>

		while (!SPI_GetFlagStatus(pSPIx, SPI_SR_TXE));			// Whait until TXE bit is set
 80009c0:	bf00      	nop
 80009c2:	2101      	movs	r1, #1
 80009c4:	68f8      	ldr	r0, [r7, #12]
 80009c6:	f000 f82c 	bl	8000a22 <SPI_GetFlagStatus>
 80009ca:	4603      	mov	r3, r0
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d0f8      	beq.n	80009c2 <SPI_SendData+0x10>

		if ((pSPIx->CR1 >> SPI_CR1_DFF) & 0x01) {
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	0adb      	lsrs	r3, r3, #11
 80009d6:	f003 0301 	and.w	r3, r3, #1
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d00e      	beq.n	80009fc <SPI_SendData+0x4a>
			// 16bit DFF
			pSPIx->DR = *((uint16_t *)pTxBuffer);
 80009de:	68bb      	ldr	r3, [r7, #8]
 80009e0:	881b      	ldrh	r3, [r3, #0]
 80009e2:	461a      	mov	r2, r3
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	60da      	str	r2, [r3, #12]
			Len--;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	3b01      	subs	r3, #1
 80009ec:	607b      	str	r3, [r7, #4]
			Len--;
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	3b01      	subs	r3, #1
 80009f2:	607b      	str	r3, [r7, #4]
			(uint16_t *)pTxBuffer++;
 80009f4:	68bb      	ldr	r3, [r7, #8]
 80009f6:	3301      	adds	r3, #1
 80009f8:	60bb      	str	r3, [r7, #8]
 80009fa:	e00a      	b.n	8000a12 <SPI_SendData+0x60>
		}
		else {
			// 8bit DFF
			pSPIx->DR = *pTxBuffer;
 80009fc:	68bb      	ldr	r3, [r7, #8]
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	68fb      	ldr	r3, [r7, #12]
 8000a04:	60da      	str	r2, [r3, #12]
			Len--;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	3b01      	subs	r3, #1
 8000a0a:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000a0c:	68bb      	ldr	r3, [r7, #8]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	60bb      	str	r3, [r7, #8]
	while (Len > 0) {
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d1d3      	bne.n	80009c0 <SPI_SendData+0xe>
		}


	}

}
 8000a18:	bf00      	nop
 8000a1a:	bf00      	nop
 8000a1c:	3710      	adds	r7, #16
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <SPI_GetFlagStatus>:
 *
 * @return			- none
 *
 * @Note			- none
*/
static uint8_t SPI_GetFlagStatus (SPI_RegDef_t *pSPIx, uint32_t Flag) {
 8000a22:	b480      	push	{r7}
 8000a24:	b083      	sub	sp, #12
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	6078      	str	r0, [r7, #4]
 8000a2a:	6039      	str	r1, [r7, #0]

	if ((pSPIx->SR >> Flag) & 0x01)
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	689a      	ldr	r2, [r3, #8]
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	fa22 f303 	lsr.w	r3, r2, r3
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d001      	beq.n	8000a42 <SPI_GetFlagStatus+0x20>
		return FLAG_SET;
 8000a3e:	2301      	movs	r3, #1
 8000a40:	e000      	b.n	8000a44 <SPI_GetFlagStatus+0x22>

	return FLAG_RESET;
 8000a42:	2300      	movs	r3, #0
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bc80      	pop	{r7}
 8000a4c:	4770      	bx	lr

08000a4e <SPI_PeripheralControl>:
 *
 * @return			- none
 *
 * @Note			- none
*/
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi) {
 8000a4e:	b480      	push	{r7}
 8000a50:	b083      	sub	sp, #12
 8000a52:	af00      	add	r7, sp, #0
 8000a54:	6078      	str	r0, [r7, #4]
 8000a56:	460b      	mov	r3, r1
 8000a58:	70fb      	strb	r3, [r7, #3]

	if (EnOrDi == ENABLE) {
 8000a5a:	78fb      	ldrb	r3, [r7, #3]
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d106      	bne.n	8000a6e <SPI_PeripheralControl+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	601a      	str	r2, [r3, #0]
	}
	else {
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}
}
 8000a6c:	e005      	b.n	8000a7a <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	681b      	ldr	r3, [r3, #0]
 8000a72:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	601a      	str	r2, [r3, #0]
}
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bc80      	pop	{r7}
 8000a82:	4770      	bx	lr

08000a84 <SPI_SSIConfig>:
 *
 * @return			- none
 *
 * @Note			- none
*/
void SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi) {
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	70fb      	strb	r3, [r7, #3]
	if (EnOrDi == ENABLE) {
 8000a90:	78fb      	ldrb	r3, [r7, #3]
 8000a92:	2b01      	cmp	r3, #1
 8000a94:	d106      	bne.n	8000aa4 <SPI_SSIConfig+0x20>
		pSPIx->CR1 |= (1 << SPI_CR1_SSI);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	601a      	str	r2, [r3, #0]
	}
	else {
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
	}
}
 8000aa2:	e005      	b.n	8000ab0 <SPI_SSIConfig+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SSI);
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	601a      	str	r2, [r3, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bc80      	pop	{r7}
 8000ab8:	4770      	bx	lr
	...

08000abc <__libc_init_array>:
 8000abc:	b570      	push	{r4, r5, r6, lr}
 8000abe:	4d0d      	ldr	r5, [pc, #52]	; (8000af4 <__libc_init_array+0x38>)
 8000ac0:	4c0d      	ldr	r4, [pc, #52]	; (8000af8 <__libc_init_array+0x3c>)
 8000ac2:	1b64      	subs	r4, r4, r5
 8000ac4:	10a4      	asrs	r4, r4, #2
 8000ac6:	2600      	movs	r6, #0
 8000ac8:	42a6      	cmp	r6, r4
 8000aca:	d109      	bne.n	8000ae0 <__libc_init_array+0x24>
 8000acc:	4d0b      	ldr	r5, [pc, #44]	; (8000afc <__libc_init_array+0x40>)
 8000ace:	4c0c      	ldr	r4, [pc, #48]	; (8000b00 <__libc_init_array+0x44>)
 8000ad0:	f000 f818 	bl	8000b04 <_init>
 8000ad4:	1b64      	subs	r4, r4, r5
 8000ad6:	10a4      	asrs	r4, r4, #2
 8000ad8:	2600      	movs	r6, #0
 8000ada:	42a6      	cmp	r6, r4
 8000adc:	d105      	bne.n	8000aea <__libc_init_array+0x2e>
 8000ade:	bd70      	pop	{r4, r5, r6, pc}
 8000ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ae4:	4798      	blx	r3
 8000ae6:	3601      	adds	r6, #1
 8000ae8:	e7ee      	b.n	8000ac8 <__libc_init_array+0xc>
 8000aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aee:	4798      	blx	r3
 8000af0:	3601      	adds	r6, #1
 8000af2:	e7f2      	b.n	8000ada <__libc_init_array+0x1e>
 8000af4:	08000b28 	.word	0x08000b28
 8000af8:	08000b28 	.word	0x08000b28
 8000afc:	08000b28 	.word	0x08000b28
 8000b00:	08000b2c 	.word	0x08000b2c

08000b04 <_init>:
 8000b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b06:	bf00      	nop
 8000b08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b0a:	bc08      	pop	{r3}
 8000b0c:	469e      	mov	lr, r3
 8000b0e:	4770      	bx	lr

08000b10 <_fini>:
 8000b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b12:	bf00      	nop
 8000b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b16:	bc08      	pop	{r3}
 8000b18:	469e      	mov	lr, r3
 8000b1a:	4770      	bx	lr
