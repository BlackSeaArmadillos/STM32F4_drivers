
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008ac  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a54  08000a5c  00010a5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a54  08000a54  00010a5c  2**0
                  CONTENTS
  4 .ARM          00000000  08000a54  08000a54  00010a5c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a54  08000a5c  00010a5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a54  08000a54  00010a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a58  08000a58  00010a58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010a5c  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  00010a5c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000ad6  00000000  00000000  00010a86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000002c0  00000000  00000000  0001155c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000c8  00000000  00000000  00011820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000000a0  00000000  00000000  000118e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000024f6  00000000  00000000  00011988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000012c9  00000000  00000000  00013e7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000099a1  00000000  00000000  00015147  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001eae8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000288  00000000  00000000  0001eb38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000a3c 	.word	0x08000a3c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000a3c 	.word	0x08000a3c

080001e8 <main>:
#define HIGH			1
#define BTN_PRESSED		HIGH

void delay(uint32_t value);

int main(void) {
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b086      	sub	sp, #24
 80001ec:	af00      	add	r7, sp, #0
	GPIO_Handle_t gpio_led, gpio_btn;

	memset(&gpio_led, 0, sizeof(gpio_led));
 80001ee:	f107 030c 	add.w	r3, r7, #12
 80001f2:	220c      	movs	r2, #12
 80001f4:	2100      	movs	r1, #0
 80001f6:	4618      	mov	r0, r3
 80001f8:	f000 fc18 	bl	8000a2c <memset>
	memset(&gpio_btn, 0, sizeof(gpio_btn));
 80001fc:	463b      	mov	r3, r7
 80001fe:	220c      	movs	r2, #12
 8000200:	2100      	movs	r1, #0
 8000202:	4618      	mov	r0, r3
 8000204:	f000 fc12 	bl	8000a2c <memset>

	// Configure LED
	gpio_led.pGPIOx = GPIOD;
 8000208:	4b18      	ldr	r3, [pc, #96]	; (800026c <main+0x84>)
 800020a:	60fb      	str	r3, [r7, #12]
	gpio_led.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 800020c:	230c      	movs	r3, #12
 800020e:	743b      	strb	r3, [r7, #16]
	gpio_led.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 8000210:	2301      	movs	r3, #1
 8000212:	747b      	strb	r3, [r7, #17]
	gpio_led.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000214:	2302      	movs	r3, #2
 8000216:	74bb      	strb	r3, [r7, #18]
	gpio_led.GPIO_PinConfig.GPIO_PinOPType =  GPIO_OTYPE_PP;
 8000218:	2300      	movs	r3, #0
 800021a:	753b      	strb	r3, [r7, #20]
	gpio_led.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_NO;
 800021c:	2300      	movs	r3, #0
 800021e:	74fb      	strb	r3, [r7, #19]

	GPIO_PeriphClkCtrl(GPIOD, ENABLE);
 8000220:	2101      	movs	r1, #1
 8000222:	4812      	ldr	r0, [pc, #72]	; (800026c <main+0x84>)
 8000224:	f000 f876 	bl	8000314 <GPIO_PeriphClkCtrl>
	GPIO_Init(&gpio_led);
 8000228:	f107 030c 	add.w	r3, r7, #12
 800022c:	4618      	mov	r0, r3
 800022e:	f000 f959 	bl	80004e4 <GPIO_Init>

	// Configure Button with interrupt
	gpio_btn.pGPIOx = GPIOA;
 8000232:	4b0f      	ldr	r3, [pc, #60]	; (8000270 <main+0x88>)
 8000234:	603b      	str	r3, [r7, #0]
	gpio_btn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 8000236:	2300      	movs	r3, #0
 8000238:	713b      	strb	r3, [r7, #4]
	gpio_btn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IT_FT;
 800023a:	2304      	movs	r3, #4
 800023c:	717b      	strb	r3, [r7, #5]
	gpio_btn.GPIO_PinConfig.GPIO_PinOPType = GPIO_OTYPE_PP;
 800023e:	2300      	movs	r3, #0
 8000240:	723b      	strb	r3, [r7, #8]
	gpio_btn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_NO;
 8000242:	2300      	movs	r3, #0
 8000244:	71fb      	strb	r3, [r7, #7]
	gpio_btn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000246:	2302      	movs	r3, #2
 8000248:	71bb      	strb	r3, [r7, #6]

	GPIO_PeriphClkCtrl(GPIOA, ENABLE);
 800024a:	2101      	movs	r1, #1
 800024c:	4808      	ldr	r0, [pc, #32]	; (8000270 <main+0x88>)
 800024e:	f000 f861 	bl	8000314 <GPIO_PeriphClkCtrl>
	GPIO_Init(&gpio_btn);
 8000252:	463b      	mov	r3, r7
 8000254:	4618      	mov	r0, r3
 8000256:	f000 f945 	bl	80004e4 <GPIO_Init>

	// Configure IRQ
	GPIO_IRQInterruptConfig(IRQ_NO_EXTI0, ENABLE);
 800025a:	2101      	movs	r1, #1
 800025c:	2006      	movs	r0, #6
 800025e:	f000 faf3 	bl	8000848 <GPIO_IRQInterruptConfig>
	GPIO_IRQPriorityConfig(IRQ_NO_EXTI0, NVIC_IRQ_PRIORITY15);
 8000262:	210f      	movs	r1, #15
 8000264:	2006      	movs	r0, #6
 8000266:	f000 fb73 	bl	8000950 <GPIO_IRQPriorityConfig>



	while (1);
 800026a:	e7fe      	b.n	800026a <main+0x82>
 800026c:	40020c00 	.word	0x40020c00
 8000270:	40020000 	.word	0x40020000

08000274 <delay>:
}

void delay(uint32_t value) {
 8000274:	b480      	push	{r7}
 8000276:	b085      	sub	sp, #20
 8000278:	af00      	add	r7, sp, #0
 800027a:	6078      	str	r0, [r7, #4]

	for (uint32_t i = 0; i < value; i++);
 800027c:	2300      	movs	r3, #0
 800027e:	60fb      	str	r3, [r7, #12]
 8000280:	e002      	b.n	8000288 <delay+0x14>
 8000282:	68fb      	ldr	r3, [r7, #12]
 8000284:	3301      	adds	r3, #1
 8000286:	60fb      	str	r3, [r7, #12]
 8000288:	68fa      	ldr	r2, [r7, #12]
 800028a:	687b      	ldr	r3, [r7, #4]
 800028c:	429a      	cmp	r2, r3
 800028e:	d3f8      	bcc.n	8000282 <delay+0xe>
}
 8000290:	bf00      	nop
 8000292:	bf00      	nop
 8000294:	3714      	adds	r7, #20
 8000296:	46bd      	mov	sp, r7
 8000298:	bc80      	pop	{r7}
 800029a:	4770      	bx	lr

0800029c <EXTI0_IRQHandler>:


void EXTI0_IRQHandler(void) {
 800029c:	b580      	push	{r7, lr}
 800029e:	af00      	add	r7, sp, #0
    // Handle the interrupt
	delay(250000);
 80002a0:	4805      	ldr	r0, [pc, #20]	; (80002b8 <EXTI0_IRQHandler+0x1c>)
 80002a2:	f7ff ffe7 	bl	8000274 <delay>
    GPIO_IRQHandler(GPIO_PIN_0);
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 fb7c 	bl	80009a4 <GPIO_IRQHandler>
    GPIO_Toggle(GPIOD, GPIO_PIN_12);
 80002ac:	210c      	movs	r1, #12
 80002ae:	4803      	ldr	r0, [pc, #12]	; (80002bc <EXTI0_IRQHandler+0x20>)
 80002b0:	f000 fab6 	bl	8000820 <GPIO_Toggle>
}
 80002b4:	bf00      	nop
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	0003d090 	.word	0x0003d090
 80002bc:	40020c00 	.word	0x40020c00

080002c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c0:	480d      	ldr	r0, [pc, #52]	; (80002f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002c2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002c4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c8:	480c      	ldr	r0, [pc, #48]	; (80002fc <LoopForever+0x6>)
  ldr r1, =_edata
 80002ca:	490d      	ldr	r1, [pc, #52]	; (8000300 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002cc:	4a0d      	ldr	r2, [pc, #52]	; (8000304 <LoopForever+0xe>)
  movs r3, #0
 80002ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002d0:	e002      	b.n	80002d8 <LoopCopyDataInit>

080002d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002d6:	3304      	adds	r3, #4

080002d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002dc:	d3f9      	bcc.n	80002d2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002de:	4a0a      	ldr	r2, [pc, #40]	; (8000308 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002e0:	4c0a      	ldr	r4, [pc, #40]	; (800030c <LoopForever+0x16>)
  movs r3, #0
 80002e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e4:	e001      	b.n	80002ea <LoopFillZerobss>

080002e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e8:	3204      	adds	r2, #4

080002ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002ec:	d3fb      	bcc.n	80002e6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ee:	f000 fb79 	bl	80009e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002f2:	f7ff ff79 	bl	80001e8 <main>

080002f6 <LoopForever>:

LoopForever:
    b LoopForever
 80002f6:	e7fe      	b.n	80002f6 <LoopForever>
  ldr   r0, =_estack
 80002f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000300:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000304:	08000a5c 	.word	0x08000a5c
  ldr r2, =_sbss
 8000308:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800030c:	2000001c 	.word	0x2000001c

08000310 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000310:	e7fe      	b.n	8000310 <ADC_IRQHandler>
	...

08000314 <GPIO_PeriphClkCtrl>:
 *
 * @return			- none
 *
 * @Note			- none
*/
void GPIO_PeriphClkCtrl (GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi) {
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
 800031c:	460b      	mov	r3, r1
 800031e:	70fb      	strb	r3, [r7, #3]

	if (EnOrDi == ENABLE) {
 8000320:	78fb      	ldrb	r3, [r7, #3]
 8000322:	2b01      	cmp	r3, #1
 8000324:	d162      	bne.n	80003ec <GPIO_PeriphClkCtrl+0xd8>
		if (pGPIOx == GPIOA) {
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	4a64      	ldr	r2, [pc, #400]	; (80004bc <GPIO_PeriphClkCtrl+0x1a8>)
 800032a:	4293      	cmp	r3, r2
 800032c:	d106      	bne.n	800033c <GPIO_PeriphClkCtrl+0x28>
			GPIOA_PCLCK_EN();
 800032e:	4b64      	ldr	r3, [pc, #400]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 8000330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000332:	4a63      	ldr	r2, [pc, #396]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 8000334:	f043 0301 	orr.w	r3, r3, #1
 8000338:	6313      	str	r3, [r2, #48]	; 0x30
		}
		else if (pGPIOx == GPIOI) {
			GPIOI_PCLCK_DI();
		}
	}
}
 800033a:	e0b9      	b.n	80004b0 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOB) {
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	4a61      	ldr	r2, [pc, #388]	; (80004c4 <GPIO_PeriphClkCtrl+0x1b0>)
 8000340:	4293      	cmp	r3, r2
 8000342:	d106      	bne.n	8000352 <GPIO_PeriphClkCtrl+0x3e>
			GPIOB_PCLCK_EN();
 8000344:	4b5e      	ldr	r3, [pc, #376]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 8000346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000348:	4a5d      	ldr	r2, [pc, #372]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 800034a:	f043 0302 	orr.w	r3, r3, #2
 800034e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000350:	e0ae      	b.n	80004b0 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOC) {
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	4a5c      	ldr	r2, [pc, #368]	; (80004c8 <GPIO_PeriphClkCtrl+0x1b4>)
 8000356:	4293      	cmp	r3, r2
 8000358:	d106      	bne.n	8000368 <GPIO_PeriphClkCtrl+0x54>
			GPIOC_PCLCK_EN();
 800035a:	4b59      	ldr	r3, [pc, #356]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 800035c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035e:	4a58      	ldr	r2, [pc, #352]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 8000360:	f043 0304 	orr.w	r3, r3, #4
 8000364:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000366:	e0a3      	b.n	80004b0 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOD) {
 8000368:	687b      	ldr	r3, [r7, #4]
 800036a:	4a58      	ldr	r2, [pc, #352]	; (80004cc <GPIO_PeriphClkCtrl+0x1b8>)
 800036c:	4293      	cmp	r3, r2
 800036e:	d106      	bne.n	800037e <GPIO_PeriphClkCtrl+0x6a>
			GPIOD_PCLCK_EN();
 8000370:	4b53      	ldr	r3, [pc, #332]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 8000372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000374:	4a52      	ldr	r2, [pc, #328]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 8000376:	f043 0308 	orr.w	r3, r3, #8
 800037a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800037c:	e098      	b.n	80004b0 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOE) {
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	4a53      	ldr	r2, [pc, #332]	; (80004d0 <GPIO_PeriphClkCtrl+0x1bc>)
 8000382:	4293      	cmp	r3, r2
 8000384:	d106      	bne.n	8000394 <GPIO_PeriphClkCtrl+0x80>
			GPIOE_PCLCK_EN();
 8000386:	4b4e      	ldr	r3, [pc, #312]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 8000388:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800038a:	4a4d      	ldr	r2, [pc, #308]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 800038c:	f043 0310 	orr.w	r3, r3, #16
 8000390:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000392:	e08d      	b.n	80004b0 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOF) {
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	4a4f      	ldr	r2, [pc, #316]	; (80004d4 <GPIO_PeriphClkCtrl+0x1c0>)
 8000398:	4293      	cmp	r3, r2
 800039a:	d106      	bne.n	80003aa <GPIO_PeriphClkCtrl+0x96>
			GPIOF_PCLCK_EN();
 800039c:	4b48      	ldr	r3, [pc, #288]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 800039e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003a0:	4a47      	ldr	r2, [pc, #284]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 80003a2:	f043 0320 	orr.w	r3, r3, #32
 80003a6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a8:	e082      	b.n	80004b0 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOG) {
 80003aa:	687b      	ldr	r3, [r7, #4]
 80003ac:	4a4a      	ldr	r2, [pc, #296]	; (80004d8 <GPIO_PeriphClkCtrl+0x1c4>)
 80003ae:	4293      	cmp	r3, r2
 80003b0:	d106      	bne.n	80003c0 <GPIO_PeriphClkCtrl+0xac>
			GPIOG_PCLCK_EN();
 80003b2:	4b43      	ldr	r3, [pc, #268]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 80003b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b6:	4a42      	ldr	r2, [pc, #264]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 80003b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80003bc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003be:	e077      	b.n	80004b0 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOH) {
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	4a46      	ldr	r2, [pc, #280]	; (80004dc <GPIO_PeriphClkCtrl+0x1c8>)
 80003c4:	4293      	cmp	r3, r2
 80003c6:	d106      	bne.n	80003d6 <GPIO_PeriphClkCtrl+0xc2>
			GPIOH_PCLCK_EN();
 80003c8:	4b3d      	ldr	r3, [pc, #244]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 80003ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003cc:	4a3c      	ldr	r2, [pc, #240]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 80003ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003d2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d4:	e06c      	b.n	80004b0 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOI) {
 80003d6:	687b      	ldr	r3, [r7, #4]
 80003d8:	4a41      	ldr	r2, [pc, #260]	; (80004e0 <GPIO_PeriphClkCtrl+0x1cc>)
 80003da:	4293      	cmp	r3, r2
 80003dc:	d168      	bne.n	80004b0 <GPIO_PeriphClkCtrl+0x19c>
			GPIOI_PCLCK_EN();
 80003de:	4b38      	ldr	r3, [pc, #224]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 80003e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e2:	4a37      	ldr	r2, [pc, #220]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 80003e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003e8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ea:	e061      	b.n	80004b0 <GPIO_PeriphClkCtrl+0x19c>
		if (pGPIOx == GPIOA) {
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	4a33      	ldr	r2, [pc, #204]	; (80004bc <GPIO_PeriphClkCtrl+0x1a8>)
 80003f0:	4293      	cmp	r3, r2
 80003f2:	d106      	bne.n	8000402 <GPIO_PeriphClkCtrl+0xee>
			GPIOA_PCLCK_DI();
 80003f4:	4b32      	ldr	r3, [pc, #200]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 80003f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f8:	4a31      	ldr	r2, [pc, #196]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 80003fa:	f023 0301 	bic.w	r3, r3, #1
 80003fe:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000400:	e056      	b.n	80004b0 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOB) {
 8000402:	687b      	ldr	r3, [r7, #4]
 8000404:	4a2f      	ldr	r2, [pc, #188]	; (80004c4 <GPIO_PeriphClkCtrl+0x1b0>)
 8000406:	4293      	cmp	r3, r2
 8000408:	d106      	bne.n	8000418 <GPIO_PeriphClkCtrl+0x104>
			GPIOB_PCLCK_DI();
 800040a:	4b2d      	ldr	r3, [pc, #180]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 800040c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040e:	4a2c      	ldr	r2, [pc, #176]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 8000410:	f023 0302 	bic.w	r3, r3, #2
 8000414:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000416:	e04b      	b.n	80004b0 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOC) {
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	4a2b      	ldr	r2, [pc, #172]	; (80004c8 <GPIO_PeriphClkCtrl+0x1b4>)
 800041c:	4293      	cmp	r3, r2
 800041e:	d106      	bne.n	800042e <GPIO_PeriphClkCtrl+0x11a>
			GPIOC_PCLCK_DI();
 8000420:	4b27      	ldr	r3, [pc, #156]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 8000422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000424:	4a26      	ldr	r2, [pc, #152]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 8000426:	f023 0304 	bic.w	r3, r3, #4
 800042a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800042c:	e040      	b.n	80004b0 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOD) {
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4a26      	ldr	r2, [pc, #152]	; (80004cc <GPIO_PeriphClkCtrl+0x1b8>)
 8000432:	4293      	cmp	r3, r2
 8000434:	d106      	bne.n	8000444 <GPIO_PeriphClkCtrl+0x130>
			GPIOD_PCLCK_DI();
 8000436:	4b22      	ldr	r3, [pc, #136]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 8000438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800043a:	4a21      	ldr	r2, [pc, #132]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 800043c:	f023 0308 	bic.w	r3, r3, #8
 8000440:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000442:	e035      	b.n	80004b0 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOE) {
 8000444:	687b      	ldr	r3, [r7, #4]
 8000446:	4a22      	ldr	r2, [pc, #136]	; (80004d0 <GPIO_PeriphClkCtrl+0x1bc>)
 8000448:	4293      	cmp	r3, r2
 800044a:	d106      	bne.n	800045a <GPIO_PeriphClkCtrl+0x146>
			GPIOE_PCLCK_DI();
 800044c:	4b1c      	ldr	r3, [pc, #112]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 800044e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000450:	4a1b      	ldr	r2, [pc, #108]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 8000452:	f023 0310 	bic.w	r3, r3, #16
 8000456:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000458:	e02a      	b.n	80004b0 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOF) {
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	4a1d      	ldr	r2, [pc, #116]	; (80004d4 <GPIO_PeriphClkCtrl+0x1c0>)
 800045e:	4293      	cmp	r3, r2
 8000460:	d106      	bne.n	8000470 <GPIO_PeriphClkCtrl+0x15c>
			GPIOF_PCLCK_DI();
 8000462:	4b17      	ldr	r3, [pc, #92]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 8000464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000466:	4a16      	ldr	r2, [pc, #88]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 8000468:	f023 0320 	bic.w	r3, r3, #32
 800046c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800046e:	e01f      	b.n	80004b0 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOG) {
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	4a19      	ldr	r2, [pc, #100]	; (80004d8 <GPIO_PeriphClkCtrl+0x1c4>)
 8000474:	4293      	cmp	r3, r2
 8000476:	d106      	bne.n	8000486 <GPIO_PeriphClkCtrl+0x172>
			GPIOG_PCLCK_DI();
 8000478:	4b11      	ldr	r3, [pc, #68]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 800047a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047c:	4a10      	ldr	r2, [pc, #64]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 800047e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000482:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000484:	e014      	b.n	80004b0 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOH) {
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	4a14      	ldr	r2, [pc, #80]	; (80004dc <GPIO_PeriphClkCtrl+0x1c8>)
 800048a:	4293      	cmp	r3, r2
 800048c:	d106      	bne.n	800049c <GPIO_PeriphClkCtrl+0x188>
			GPIOH_PCLCK_DI();
 800048e:	4b0c      	ldr	r3, [pc, #48]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 8000490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000492:	4a0b      	ldr	r2, [pc, #44]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 8000494:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000498:	6313      	str	r3, [r2, #48]	; 0x30
}
 800049a:	e009      	b.n	80004b0 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOI) {
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	4a10      	ldr	r2, [pc, #64]	; (80004e0 <GPIO_PeriphClkCtrl+0x1cc>)
 80004a0:	4293      	cmp	r3, r2
 80004a2:	d105      	bne.n	80004b0 <GPIO_PeriphClkCtrl+0x19c>
			GPIOI_PCLCK_DI();
 80004a4:	4b06      	ldr	r3, [pc, #24]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 80004a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a8:	4a05      	ldr	r2, [pc, #20]	; (80004c0 <GPIO_PeriphClkCtrl+0x1ac>)
 80004aa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80004ae:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004b0:	bf00      	nop
 80004b2:	370c      	adds	r7, #12
 80004b4:	46bd      	mov	sp, r7
 80004b6:	bc80      	pop	{r7}
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	40020000 	.word	0x40020000
 80004c0:	40023800 	.word	0x40023800
 80004c4:	40020400 	.word	0x40020400
 80004c8:	40020800 	.word	0x40020800
 80004cc:	40020c00 	.word	0x40020c00
 80004d0:	40021000 	.word	0x40021000
 80004d4:	40021400 	.word	0x40021400
 80004d8:	40021800 	.word	0x40021800
 80004dc:	40021c00 	.word	0x40021c00
 80004e0:	40022000 	.word	0x40022000

080004e4 <GPIO_Init>:
 *
 * @return			- none
 *
 * @Note			- none
*/
void GPIO_Init (GPIO_Handle_t *pGPIOHandle) {
 80004e4:	b480      	push	{r7}
 80004e6:	b087      	sub	sp, #28
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;
 80004ec:	2300      	movs	r3, #0
 80004ee:	617b      	str	r3, [r7, #20]

	// 1. Configure GPIO pin mode
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	795b      	ldrb	r3, [r3, #5]
 80004f4:	2b03      	cmp	r3, #3
 80004f6:	d822      	bhi.n	800053e <GPIO_Init+0x5a>
		// Non-interupt mode

		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << ( 2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));		// Get the mode and the pin number
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	795b      	ldrb	r3, [r3, #5]
 80004fc:	461a      	mov	r2, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	791b      	ldrb	r3, [r3, #4]
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	fa02 f303 	lsl.w	r3, r2, r3
 8000508:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );					// Clear bits
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	791b      	ldrb	r3, [r3, #4]
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	2103      	movs	r1, #3
 8000518:	fa01 f303 	lsl.w	r3, r1, r3
 800051c:	43db      	mvns	r3, r3
 800051e:	4619      	mov	r1, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	400a      	ands	r2, r1
 8000526:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;																			// Store the value of temp in the mode register
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	6819      	ldr	r1, [r3, #0]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	697a      	ldr	r2, [r7, #20]
 8000534:	430a      	orrs	r2, r1
 8000536:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000538:	2300      	movs	r3, #0
 800053a:	617b      	str	r3, [r7, #20]
 800053c:	e0c8      	b.n	80006d0 <GPIO_Init+0x1ec>
	}
	else {
		// Interupt mode
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT) {
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	795b      	ldrb	r3, [r3, #5]
 8000542:	2b04      	cmp	r3, #4
 8000544:	d117      	bne.n	8000576 <GPIO_Init+0x92>
			// 1. Configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000546:	4b47      	ldr	r3, [pc, #284]	; (8000664 <GPIO_Init+0x180>)
 8000548:	68db      	ldr	r3, [r3, #12]
 800054a:	687a      	ldr	r2, [r7, #4]
 800054c:	7912      	ldrb	r2, [r2, #4]
 800054e:	4611      	mov	r1, r2
 8000550:	2201      	movs	r2, #1
 8000552:	408a      	lsls	r2, r1
 8000554:	4611      	mov	r1, r2
 8000556:	4a43      	ldr	r2, [pc, #268]	; (8000664 <GPIO_Init+0x180>)
 8000558:	430b      	orrs	r3, r1
 800055a:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		// Clear corresponding RTSR bit
 800055c:	4b41      	ldr	r3, [pc, #260]	; (8000664 <GPIO_Init+0x180>)
 800055e:	689b      	ldr	r3, [r3, #8]
 8000560:	687a      	ldr	r2, [r7, #4]
 8000562:	7912      	ldrb	r2, [r2, #4]
 8000564:	4611      	mov	r1, r2
 8000566:	2201      	movs	r2, #1
 8000568:	408a      	lsls	r2, r1
 800056a:	43d2      	mvns	r2, r2
 800056c:	4611      	mov	r1, r2
 800056e:	4a3d      	ldr	r2, [pc, #244]	; (8000664 <GPIO_Init+0x180>)
 8000570:	400b      	ands	r3, r1
 8000572:	6093      	str	r3, [r2, #8]
 8000574:	e035      	b.n	80005e2 <GPIO_Init+0xfe>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT) {
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	795b      	ldrb	r3, [r3, #5]
 800057a:	2b05      	cmp	r3, #5
 800057c:	d117      	bne.n	80005ae <GPIO_Init+0xca>
			// 1. Configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800057e:	4b39      	ldr	r3, [pc, #228]	; (8000664 <GPIO_Init+0x180>)
 8000580:	689b      	ldr	r3, [r3, #8]
 8000582:	687a      	ldr	r2, [r7, #4]
 8000584:	7912      	ldrb	r2, [r2, #4]
 8000586:	4611      	mov	r1, r2
 8000588:	2201      	movs	r2, #1
 800058a:	408a      	lsls	r2, r1
 800058c:	4611      	mov	r1, r2
 800058e:	4a35      	ldr	r2, [pc, #212]	; (8000664 <GPIO_Init+0x180>)
 8000590:	430b      	orrs	r3, r1
 8000592:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		// Clear correspongind FTSR bit
 8000594:	4b33      	ldr	r3, [pc, #204]	; (8000664 <GPIO_Init+0x180>)
 8000596:	68db      	ldr	r3, [r3, #12]
 8000598:	687a      	ldr	r2, [r7, #4]
 800059a:	7912      	ldrb	r2, [r2, #4]
 800059c:	4611      	mov	r1, r2
 800059e:	2201      	movs	r2, #1
 80005a0:	408a      	lsls	r2, r1
 80005a2:	43d2      	mvns	r2, r2
 80005a4:	4611      	mov	r1, r2
 80005a6:	4a2f      	ldr	r2, [pc, #188]	; (8000664 <GPIO_Init+0x180>)
 80005a8:	400b      	ands	r3, r1
 80005aa:	60d3      	str	r3, [r2, #12]
 80005ac:	e019      	b.n	80005e2 <GPIO_Init+0xfe>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT) {
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	795b      	ldrb	r3, [r3, #5]
 80005b2:	2b06      	cmp	r3, #6
 80005b4:	d115      	bne.n	80005e2 <GPIO_Init+0xfe>
			// 1. Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005b6:	4b2b      	ldr	r3, [pc, #172]	; (8000664 <GPIO_Init+0x180>)
 80005b8:	68db      	ldr	r3, [r3, #12]
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	7912      	ldrb	r2, [r2, #4]
 80005be:	4611      	mov	r1, r2
 80005c0:	2201      	movs	r2, #1
 80005c2:	408a      	lsls	r2, r1
 80005c4:	4611      	mov	r1, r2
 80005c6:	4a27      	ldr	r2, [pc, #156]	; (8000664 <GPIO_Init+0x180>)
 80005c8:	430b      	orrs	r3, r1
 80005ca:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005cc:	4b25      	ldr	r3, [pc, #148]	; (8000664 <GPIO_Init+0x180>)
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	7912      	ldrb	r2, [r2, #4]
 80005d4:	4611      	mov	r1, r2
 80005d6:	2201      	movs	r2, #1
 80005d8:	408a      	lsls	r2, r1
 80005da:	4611      	mov	r1, r2
 80005dc:	4a21      	ldr	r2, [pc, #132]	; (8000664 <GPIO_Init+0x180>)
 80005de:	430b      	orrs	r3, r1
 80005e0:	6093      	str	r3, [r2, #8]

		// 2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t exti_temp1, exti_temp2;
		uint8_t portcode;

		exti_temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	791b      	ldrb	r3, [r3, #4]
 80005e6:	089b      	lsrs	r3, r3, #2
 80005e8:	74fb      	strb	r3, [r7, #19]
		exti_temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	791b      	ldrb	r3, [r3, #4]
 80005ee:	f003 0303 	and.w	r3, r3, #3
 80005f2:	74bb      	strb	r3, [r7, #18]
		portcode = GPIO_BASE_ADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	4a1b      	ldr	r2, [pc, #108]	; (8000668 <GPIO_Init+0x184>)
 80005fa:	4293      	cmp	r3, r2
 80005fc:	d044      	beq.n	8000688 <GPIO_Init+0x1a4>
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	4a1a      	ldr	r2, [pc, #104]	; (800066c <GPIO_Init+0x188>)
 8000604:	4293      	cmp	r3, r2
 8000606:	d02b      	beq.n	8000660 <GPIO_Init+0x17c>
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	4a18      	ldr	r2, [pc, #96]	; (8000670 <GPIO_Init+0x18c>)
 800060e:	4293      	cmp	r3, r2
 8000610:	d024      	beq.n	800065c <GPIO_Init+0x178>
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	4a17      	ldr	r2, [pc, #92]	; (8000674 <GPIO_Init+0x190>)
 8000618:	4293      	cmp	r3, r2
 800061a:	d01d      	beq.n	8000658 <GPIO_Init+0x174>
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	4a15      	ldr	r2, [pc, #84]	; (8000678 <GPIO_Init+0x194>)
 8000622:	4293      	cmp	r3, r2
 8000624:	d016      	beq.n	8000654 <GPIO_Init+0x170>
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4a14      	ldr	r2, [pc, #80]	; (800067c <GPIO_Init+0x198>)
 800062c:	4293      	cmp	r3, r2
 800062e:	d00f      	beq.n	8000650 <GPIO_Init+0x16c>
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	4a12      	ldr	r2, [pc, #72]	; (8000680 <GPIO_Init+0x19c>)
 8000636:	4293      	cmp	r3, r2
 8000638:	d008      	beq.n	800064c <GPIO_Init+0x168>
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	4a11      	ldr	r2, [pc, #68]	; (8000684 <GPIO_Init+0x1a0>)
 8000640:	4293      	cmp	r3, r2
 8000642:	d101      	bne.n	8000648 <GPIO_Init+0x164>
 8000644:	2307      	movs	r3, #7
 8000646:	e020      	b.n	800068a <GPIO_Init+0x1a6>
 8000648:	2308      	movs	r3, #8
 800064a:	e01e      	b.n	800068a <GPIO_Init+0x1a6>
 800064c:	2306      	movs	r3, #6
 800064e:	e01c      	b.n	800068a <GPIO_Init+0x1a6>
 8000650:	2305      	movs	r3, #5
 8000652:	e01a      	b.n	800068a <GPIO_Init+0x1a6>
 8000654:	2304      	movs	r3, #4
 8000656:	e018      	b.n	800068a <GPIO_Init+0x1a6>
 8000658:	2303      	movs	r3, #3
 800065a:	e016      	b.n	800068a <GPIO_Init+0x1a6>
 800065c:	2302      	movs	r3, #2
 800065e:	e014      	b.n	800068a <GPIO_Init+0x1a6>
 8000660:	2301      	movs	r3, #1
 8000662:	e012      	b.n	800068a <GPIO_Init+0x1a6>
 8000664:	40013c00 	.word	0x40013c00
 8000668:	40020000 	.word	0x40020000
 800066c:	40020400 	.word	0x40020400
 8000670:	40020800 	.word	0x40020800
 8000674:	40020c00 	.word	0x40020c00
 8000678:	40021000 	.word	0x40021000
 800067c:	40021400 	.word	0x40021400
 8000680:	40021800 	.word	0x40021800
 8000684:	40021c00 	.word	0x40021c00
 8000688:	2300      	movs	r3, #0
 800068a:	747b      	strb	r3, [r7, #17]

		SYSCFG_PCLK_EN();
 800068c:	4b61      	ldr	r3, [pc, #388]	; (8000814 <GPIO_Init+0x330>)
 800068e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000690:	4a60      	ldr	r2, [pc, #384]	; (8000814 <GPIO_Init+0x330>)
 8000692:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000696:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[exti_temp1] |= portcode << (4*exti_temp2);
 8000698:	4a5f      	ldr	r2, [pc, #380]	; (8000818 <GPIO_Init+0x334>)
 800069a:	7cfb      	ldrb	r3, [r7, #19]
 800069c:	3302      	adds	r3, #2
 800069e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006a2:	7c79      	ldrb	r1, [r7, #17]
 80006a4:	7cbb      	ldrb	r3, [r7, #18]
 80006a6:	009b      	lsls	r3, r3, #2
 80006a8:	fa01 f303 	lsl.w	r3, r1, r3
 80006ac:	4618      	mov	r0, r3
 80006ae:	495a      	ldr	r1, [pc, #360]	; (8000818 <GPIO_Init+0x334>)
 80006b0:	7cfb      	ldrb	r3, [r7, #19]
 80006b2:	4302      	orrs	r2, r0
 80006b4:	3302      	adds	r3, #2
 80006b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80006ba:	4b58      	ldr	r3, [pc, #352]	; (800081c <GPIO_Init+0x338>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	687a      	ldr	r2, [r7, #4]
 80006c0:	7912      	ldrb	r2, [r2, #4]
 80006c2:	4611      	mov	r1, r2
 80006c4:	2201      	movs	r2, #1
 80006c6:	408a      	lsls	r2, r1
 80006c8:	4611      	mov	r1, r2
 80006ca:	4a54      	ldr	r2, [pc, #336]	; (800081c <GPIO_Init+0x338>)
 80006cc:	430b      	orrs	r3, r1
 80006ce:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 80006d0:	2300      	movs	r3, #0
 80006d2:	617b      	str	r3, [r7, #20]

	// 2. Configure GPIO speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));		// Get the speed and pin number
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	799b      	ldrb	r3, [r3, #6]
 80006d8:	461a      	mov	r2, r3
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	791b      	ldrb	r3, [r3, #4]
 80006de:	005b      	lsls	r3, r3, #1
 80006e0:	fa02 f303 	lsl.w	r3, r2, r3
 80006e4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );						// Clear bits
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	689a      	ldr	r2, [r3, #8]
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	791b      	ldrb	r3, [r3, #4]
 80006f0:	4619      	mov	r1, r3
 80006f2:	2303      	movs	r3, #3
 80006f4:	408b      	lsls	r3, r1
 80006f6:	43db      	mvns	r3, r3
 80006f8:	4619      	mov	r1, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	400a      	ands	r2, r1
 8000700:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;																		// Store the value of temp in the speed register
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	681b      	ldr	r3, [r3, #0]
 8000706:	6899      	ldr	r1, [r3, #8]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	697a      	ldr	r2, [r7, #20]
 800070e:	430a      	orrs	r2, r1
 8000710:	609a      	str	r2, [r3, #8]
	temp = 0;
 8000712:	2300      	movs	r3, #0
 8000714:	617b      	str	r3, [r7, #20]

	// 3. Configure GPIO pull-up/pull-down
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));		// Get PuPd and pin number
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	79db      	ldrb	r3, [r3, #7]
 800071a:	461a      	mov	r2, r3
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	791b      	ldrb	r3, [r3, #4]
 8000720:	005b      	lsls	r3, r3, #1
 8000722:	fa02 f303 	lsl.w	r3, r2, r3
 8000726:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );							// Clear bits
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	68da      	ldr	r2, [r3, #12]
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	791b      	ldrb	r3, [r3, #4]
 8000732:	005b      	lsls	r3, r3, #1
 8000734:	2103      	movs	r1, #3
 8000736:	fa01 f303 	lsl.w	r3, r1, r3
 800073a:	43db      	mvns	r3, r3
 800073c:	4619      	mov	r1, r3
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	400a      	ands	r2, r1
 8000744:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;																					// Store the value of temp in pull-up/pull-down register
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	681b      	ldr	r3, [r3, #0]
 800074a:	68d9      	ldr	r1, [r3, #12]
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	697a      	ldr	r2, [r7, #20]
 8000752:	430a      	orrs	r2, r1
 8000754:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000756:	2300      	movs	r3, #0
 8000758:	617b      	str	r3, [r7, #20]

	// 4. Configure output type register
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );		// Get output type and pin number
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	7a1b      	ldrb	r3, [r3, #8]
 800075e:	461a      	mov	r2, r3
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	791b      	ldrb	r3, [r3, #4]
 8000764:	fa02 f303 	lsl.w	r3, r2, r3
 8000768:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );					// Clear bits
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	685a      	ldr	r2, [r3, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	791b      	ldrb	r3, [r3, #4]
 8000774:	4619      	mov	r1, r3
 8000776:	2301      	movs	r3, #1
 8000778:	408b      	lsls	r3, r1
 800077a:	43db      	mvns	r3, r3
 800077c:	4619      	mov	r1, r3
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	400a      	ands	r2, r1
 8000784:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;																	// Store the values of temp in output type register
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	6859      	ldr	r1, [r3, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	697a      	ldr	r2, [r7, #20]
 8000792:	430a      	orrs	r2, r1
 8000794:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	617b      	str	r3, [r7, #20]

	// 5. Configure alternate function register
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_AF) {
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	795b      	ldrb	r3, [r3, #5]
 800079e:	2b02      	cmp	r3, #2
 80007a0:	d133      	bne.n	800080a <GPIO_Init+0x326>
		uint8_t temp1, temp2 = 0;
 80007a2:	2300      	movs	r3, #0
 80007a4:	743b      	strb	r3, [r7, #16]

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;												// Get the register 0 (AFL) or 1 (AFH)
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	791b      	ldrb	r3, [r3, #4]
 80007aa:	08db      	lsrs	r3, r3, #3
 80007ac:	73fb      	strb	r3, [r7, #15]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;												// Get the pin number
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	791b      	ldrb	r3, [r3, #4]
 80007b2:	f003 0307 	and.w	r3, r3, #7
 80007b6:	743b      	strb	r3, [r7, #16]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~( 0xF << (4*temp2) );													// Clear bits
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	7bfa      	ldrb	r2, [r7, #15]
 80007be:	3208      	adds	r2, #8
 80007c0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007c4:	7c3b      	ldrb	r3, [r7, #16]
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	220f      	movs	r2, #15
 80007ca:	fa02 f303 	lsl.w	r3, r2, r3
 80007ce:	43db      	mvns	r3, r3
 80007d0:	4618      	mov	r0, r3
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	7bfa      	ldrb	r2, [r7, #15]
 80007d8:	4001      	ands	r1, r0
 80007da:	3208      	adds	r2, #8
 80007dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));	// Store the values in temp2 in register[temp1]
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	7bfa      	ldrb	r2, [r7, #15]
 80007e6:	3208      	adds	r2, #8
 80007e8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	7a5b      	ldrb	r3, [r3, #9]
 80007f0:	461a      	mov	r2, r3
 80007f2:	7c3b      	ldrb	r3, [r7, #16]
 80007f4:	009b      	lsls	r3, r3, #2
 80007f6:	fa02 f303 	lsl.w	r3, r2, r3
 80007fa:	4618      	mov	r0, r3
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	7bfa      	ldrb	r2, [r7, #15]
 8000802:	4301      	orrs	r1, r0
 8000804:	3208      	adds	r2, #8
 8000806:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
	else {
		// nothing to be done
	}
}
 800080a:	bf00      	nop
 800080c:	371c      	adds	r7, #28
 800080e:	46bd      	mov	sp, r7
 8000810:	bc80      	pop	{r7}
 8000812:	4770      	bx	lr
 8000814:	40023800 	.word	0x40023800
 8000818:	40013800 	.word	0x40013800
 800081c:	40013c00 	.word	0x40013c00

08000820 <GPIO_Toggle>:
 *
 * @return			- none
 *
 * @Note			- none
*/
void GPIO_Toggle (GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
 8000826:	6078      	str	r0, [r7, #4]
 8000828:	460b      	mov	r3, r1
 800082a:	70fb      	strb	r3, [r7, #3]

	pGPIOx->ODR ^= (1 << PinNumber);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	695b      	ldr	r3, [r3, #20]
 8000830:	78fa      	ldrb	r2, [r7, #3]
 8000832:	2101      	movs	r1, #1
 8000834:	fa01 f202 	lsl.w	r2, r1, r2
 8000838:	405a      	eors	r2, r3
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	615a      	str	r2, [r3, #20]
}
 800083e:	bf00      	nop
 8000840:	370c      	adds	r7, #12
 8000842:	46bd      	mov	sp, r7
 8000844:	bc80      	pop	{r7}
 8000846:	4770      	bx	lr

08000848 <GPIO_IRQInterruptConfig>:
 *
 * @return			-
 *
 * @Note			-
*/
void GPIO_IRQInterruptConfig (uint8_t IRQNumber, uint8_t EnOrDi) {
 8000848:	b480      	push	{r7}
 800084a:	b083      	sub	sp, #12
 800084c:	af00      	add	r7, sp, #0
 800084e:	4603      	mov	r3, r0
 8000850:	460a      	mov	r2, r1
 8000852:	71fb      	strb	r3, [r7, #7]
 8000854:	4613      	mov	r3, r2
 8000856:	71bb      	strb	r3, [r7, #6]

	if (EnOrDi ==ENABLE) {
 8000858:	79bb      	ldrb	r3, [r7, #6]
 800085a:	2b01      	cmp	r3, #1
 800085c:	d133      	bne.n	80008c6 <GPIO_IRQInterruptConfig+0x7e>
		if (IRQNumber < 32) {
 800085e:	79fb      	ldrb	r3, [r7, #7]
 8000860:	2b1f      	cmp	r3, #31
 8000862:	d80a      	bhi.n	800087a <GPIO_IRQInterruptConfig+0x32>
			// program ISER0 register
			*NVIC_ISER0 |= (1 << IRQNumber);
 8000864:	4b34      	ldr	r3, [pc, #208]	; (8000938 <GPIO_IRQInterruptConfig+0xf0>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	79fa      	ldrb	r2, [r7, #7]
 800086a:	2101      	movs	r1, #1
 800086c:	fa01 f202 	lsl.w	r2, r1, r2
 8000870:	4611      	mov	r1, r2
 8000872:	4a31      	ldr	r2, [pc, #196]	; (8000938 <GPIO_IRQInterruptConfig+0xf0>)
 8000874:	430b      	orrs	r3, r1
 8000876:	6013      	str	r3, [r2, #0]
		else if (IRQNumber >= 64 && IRQNumber < 96) {
			// program ICER2 register
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
		}
	}
}
 8000878:	e059      	b.n	800092e <GPIO_IRQInterruptConfig+0xe6>
		else if (IRQNumber >= 32 && IRQNumber < 64) {
 800087a:	79fb      	ldrb	r3, [r7, #7]
 800087c:	2b1f      	cmp	r3, #31
 800087e:	d90f      	bls.n	80008a0 <GPIO_IRQInterruptConfig+0x58>
 8000880:	79fb      	ldrb	r3, [r7, #7]
 8000882:	2b3f      	cmp	r3, #63	; 0x3f
 8000884:	d80c      	bhi.n	80008a0 <GPIO_IRQInterruptConfig+0x58>
			*NVIC_ISER1 |= (1 << (IRQNumber % 32));
 8000886:	4b2d      	ldr	r3, [pc, #180]	; (800093c <GPIO_IRQInterruptConfig+0xf4>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	79fa      	ldrb	r2, [r7, #7]
 800088c:	f002 021f 	and.w	r2, r2, #31
 8000890:	2101      	movs	r1, #1
 8000892:	fa01 f202 	lsl.w	r2, r1, r2
 8000896:	4611      	mov	r1, r2
 8000898:	4a28      	ldr	r2, [pc, #160]	; (800093c <GPIO_IRQInterruptConfig+0xf4>)
 800089a:	430b      	orrs	r3, r1
 800089c:	6013      	str	r3, [r2, #0]
 800089e:	e046      	b.n	800092e <GPIO_IRQInterruptConfig+0xe6>
		else if (IRQNumber >= 64 && IRQNumber < 96) {
 80008a0:	79fb      	ldrb	r3, [r7, #7]
 80008a2:	2b3f      	cmp	r3, #63	; 0x3f
 80008a4:	d943      	bls.n	800092e <GPIO_IRQInterruptConfig+0xe6>
 80008a6:	79fb      	ldrb	r3, [r7, #7]
 80008a8:	2b5f      	cmp	r3, #95	; 0x5f
 80008aa:	d840      	bhi.n	800092e <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ISER2 |= (1 << (IRQNumber % 64));
 80008ac:	4b24      	ldr	r3, [pc, #144]	; (8000940 <GPIO_IRQInterruptConfig+0xf8>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	79fa      	ldrb	r2, [r7, #7]
 80008b2:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80008b6:	2101      	movs	r1, #1
 80008b8:	fa01 f202 	lsl.w	r2, r1, r2
 80008bc:	4611      	mov	r1, r2
 80008be:	4a20      	ldr	r2, [pc, #128]	; (8000940 <GPIO_IRQInterruptConfig+0xf8>)
 80008c0:	430b      	orrs	r3, r1
 80008c2:	6013      	str	r3, [r2, #0]
}
 80008c4:	e033      	b.n	800092e <GPIO_IRQInterruptConfig+0xe6>
		if (IRQNumber < 32) {
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	2b1f      	cmp	r3, #31
 80008ca:	d80a      	bhi.n	80008e2 <GPIO_IRQInterruptConfig+0x9a>
			*NVIC_ICER0 |= (1 << IRQNumber);
 80008cc:	4b1d      	ldr	r3, [pc, #116]	; (8000944 <GPIO_IRQInterruptConfig+0xfc>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	79fa      	ldrb	r2, [r7, #7]
 80008d2:	2101      	movs	r1, #1
 80008d4:	fa01 f202 	lsl.w	r2, r1, r2
 80008d8:	4611      	mov	r1, r2
 80008da:	4a1a      	ldr	r2, [pc, #104]	; (8000944 <GPIO_IRQInterruptConfig+0xfc>)
 80008dc:	430b      	orrs	r3, r1
 80008de:	6013      	str	r3, [r2, #0]
}
 80008e0:	e025      	b.n	800092e <GPIO_IRQInterruptConfig+0xe6>
		else if (IRQNumber >= 32 && IRQNumber < 64) {
 80008e2:	79fb      	ldrb	r3, [r7, #7]
 80008e4:	2b1f      	cmp	r3, #31
 80008e6:	d90f      	bls.n	8000908 <GPIO_IRQInterruptConfig+0xc0>
 80008e8:	79fb      	ldrb	r3, [r7, #7]
 80008ea:	2b3f      	cmp	r3, #63	; 0x3f
 80008ec:	d80c      	bhi.n	8000908 <GPIO_IRQInterruptConfig+0xc0>
			*NVIC_ICER1 |= (1 << (IRQNumber % 32));
 80008ee:	4b16      	ldr	r3, [pc, #88]	; (8000948 <GPIO_IRQInterruptConfig+0x100>)
 80008f0:	681b      	ldr	r3, [r3, #0]
 80008f2:	79fa      	ldrb	r2, [r7, #7]
 80008f4:	f002 021f 	and.w	r2, r2, #31
 80008f8:	2101      	movs	r1, #1
 80008fa:	fa01 f202 	lsl.w	r2, r1, r2
 80008fe:	4611      	mov	r1, r2
 8000900:	4a11      	ldr	r2, [pc, #68]	; (8000948 <GPIO_IRQInterruptConfig+0x100>)
 8000902:	430b      	orrs	r3, r1
 8000904:	6013      	str	r3, [r2, #0]
 8000906:	e012      	b.n	800092e <GPIO_IRQInterruptConfig+0xe6>
		else if (IRQNumber >= 64 && IRQNumber < 96) {
 8000908:	79fb      	ldrb	r3, [r7, #7]
 800090a:	2b3f      	cmp	r3, #63	; 0x3f
 800090c:	d90f      	bls.n	800092e <GPIO_IRQInterruptConfig+0xe6>
 800090e:	79fb      	ldrb	r3, [r7, #7]
 8000910:	2b5f      	cmp	r3, #95	; 0x5f
 8000912:	d80c      	bhi.n	800092e <GPIO_IRQInterruptConfig+0xe6>
			*NVIC_ICER2 |= (1 << (IRQNumber % 64));
 8000914:	4b0d      	ldr	r3, [pc, #52]	; (800094c <GPIO_IRQInterruptConfig+0x104>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	79fa      	ldrb	r2, [r7, #7]
 800091a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800091e:	2101      	movs	r1, #1
 8000920:	fa01 f202 	lsl.w	r2, r1, r2
 8000924:	4611      	mov	r1, r2
 8000926:	4a09      	ldr	r2, [pc, #36]	; (800094c <GPIO_IRQInterruptConfig+0x104>)
 8000928:	430b      	orrs	r3, r1
 800092a:	6013      	str	r3, [r2, #0]
}
 800092c:	e7ff      	b.n	800092e <GPIO_IRQInterruptConfig+0xe6>
 800092e:	bf00      	nop
 8000930:	370c      	adds	r7, #12
 8000932:	46bd      	mov	sp, r7
 8000934:	bc80      	pop	{r7}
 8000936:	4770      	bx	lr
 8000938:	e000e100 	.word	0xe000e100
 800093c:	e000e104 	.word	0xe000e104
 8000940:	e000e108 	.word	0xe000e108
 8000944:	e000e180 	.word	0xe000e180
 8000948:	e000e184 	.word	0xe000e184
 800094c:	e000e188 	.word	0xe000e188

08000950 <GPIO_IRQPriorityConfig>:
 *
 * @return			-
 *
 * @Note			-
*/
void GPIO_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority) {
 8000950:	b480      	push	{r7}
 8000952:	b085      	sub	sp, #20
 8000954:	af00      	add	r7, sp, #0
 8000956:	4603      	mov	r3, r0
 8000958:	6039      	str	r1, [r7, #0]
 800095a:	71fb      	strb	r3, [r7, #7]

	// 1. Find IPR register
	uint8_t iprx, iprx_section, shift_amount;

	iprx = IRQNumber / 4;
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	089b      	lsrs	r3, r3, #2
 8000960:	73fb      	strb	r3, [r7, #15]
	iprx_section = IRQNumber % 4;
 8000962:	79fb      	ldrb	r3, [r7, #7]
 8000964:	f003 0303 	and.w	r3, r3, #3
 8000968:	73bb      	strb	r3, [r7, #14]
	shift_amount = (8 * iprx_section) + ( 8 - NO_PR_BITS_IMPLEMENTED );
 800096a:	7bbb      	ldrb	r3, [r7, #14]
 800096c:	00db      	lsls	r3, r3, #3
 800096e:	b2db      	uxtb	r3, r3
 8000970:	3304      	adds	r3, #4
 8000972:	737b      	strb	r3, [r7, #13]
	*(NVIC_PR_BASE_ADDR + iprx) |= ( IRQPriority << shift_amount );
 8000974:	7bfb      	ldrb	r3, [r7, #15]
 8000976:	009b      	lsls	r3, r3, #2
 8000978:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 800097c:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000980:	6819      	ldr	r1, [r3, #0]
 8000982:	7b7b      	ldrb	r3, [r7, #13]
 8000984:	683a      	ldr	r2, [r7, #0]
 8000986:	409a      	lsls	r2, r3
 8000988:	7bfb      	ldrb	r3, [r7, #15]
 800098a:	009b      	lsls	r3, r3, #2
 800098c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
 8000990:	f503 4364 	add.w	r3, r3, #58368	; 0xe400
 8000994:	430a      	orrs	r2, r1
 8000996:	601a      	str	r2, [r3, #0]
}
 8000998:	bf00      	nop
 800099a:	3714      	adds	r7, #20
 800099c:	46bd      	mov	sp, r7
 800099e:	bc80      	pop	{r7}
 80009a0:	4770      	bx	lr
	...

080009a4 <GPIO_IRQHandler>:
 *
 * @return			- none
 *
 * @Note			- none
*/
void GPIO_IRQHandler (uint8_t PinNumber) {
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	4603      	mov	r3, r0
 80009ac:	71fb      	strb	r3, [r7, #7]

	// Clear the EXTI Pending Register (PR) corresponding to the pin number
	if (EXTI->PR & (1 << PinNumber)) {
 80009ae:	4b0c      	ldr	r3, [pc, #48]	; (80009e0 <GPIO_IRQHandler+0x3c>)
 80009b0:	695b      	ldr	r3, [r3, #20]
 80009b2:	79fa      	ldrb	r2, [r7, #7]
 80009b4:	2101      	movs	r1, #1
 80009b6:	fa01 f202 	lsl.w	r2, r1, r2
 80009ba:	4013      	ands	r3, r2
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d009      	beq.n	80009d4 <GPIO_IRQHandler+0x30>
		// Clear PR by writing 1
		EXTI->PR |= (1 << PinNumber);
 80009c0:	4b07      	ldr	r3, [pc, #28]	; (80009e0 <GPIO_IRQHandler+0x3c>)
 80009c2:	695b      	ldr	r3, [r3, #20]
 80009c4:	79fa      	ldrb	r2, [r7, #7]
 80009c6:	2101      	movs	r1, #1
 80009c8:	fa01 f202 	lsl.w	r2, r1, r2
 80009cc:	4611      	mov	r1, r2
 80009ce:	4a04      	ldr	r2, [pc, #16]	; (80009e0 <GPIO_IRQHandler+0x3c>)
 80009d0:	430b      	orrs	r3, r1
 80009d2:	6153      	str	r3, [r2, #20]
	}
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	bc80      	pop	{r7}
 80009dc:	4770      	bx	lr
 80009de:	bf00      	nop
 80009e0:	40013c00 	.word	0x40013c00

080009e4 <__libc_init_array>:
 80009e4:	b570      	push	{r4, r5, r6, lr}
 80009e6:	4d0d      	ldr	r5, [pc, #52]	; (8000a1c <__libc_init_array+0x38>)
 80009e8:	4c0d      	ldr	r4, [pc, #52]	; (8000a20 <__libc_init_array+0x3c>)
 80009ea:	1b64      	subs	r4, r4, r5
 80009ec:	10a4      	asrs	r4, r4, #2
 80009ee:	2600      	movs	r6, #0
 80009f0:	42a6      	cmp	r6, r4
 80009f2:	d109      	bne.n	8000a08 <__libc_init_array+0x24>
 80009f4:	4d0b      	ldr	r5, [pc, #44]	; (8000a24 <__libc_init_array+0x40>)
 80009f6:	4c0c      	ldr	r4, [pc, #48]	; (8000a28 <__libc_init_array+0x44>)
 80009f8:	f000 f820 	bl	8000a3c <_init>
 80009fc:	1b64      	subs	r4, r4, r5
 80009fe:	10a4      	asrs	r4, r4, #2
 8000a00:	2600      	movs	r6, #0
 8000a02:	42a6      	cmp	r6, r4
 8000a04:	d105      	bne.n	8000a12 <__libc_init_array+0x2e>
 8000a06:	bd70      	pop	{r4, r5, r6, pc}
 8000a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a0c:	4798      	blx	r3
 8000a0e:	3601      	adds	r6, #1
 8000a10:	e7ee      	b.n	80009f0 <__libc_init_array+0xc>
 8000a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a16:	4798      	blx	r3
 8000a18:	3601      	adds	r6, #1
 8000a1a:	e7f2      	b.n	8000a02 <__libc_init_array+0x1e>
 8000a1c:	08000a54 	.word	0x08000a54
 8000a20:	08000a54 	.word	0x08000a54
 8000a24:	08000a54 	.word	0x08000a54
 8000a28:	08000a58 	.word	0x08000a58

08000a2c <memset>:
 8000a2c:	4402      	add	r2, r0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	4293      	cmp	r3, r2
 8000a32:	d100      	bne.n	8000a36 <memset+0xa>
 8000a34:	4770      	bx	lr
 8000a36:	f803 1b01 	strb.w	r1, [r3], #1
 8000a3a:	e7f9      	b.n	8000a30 <memset+0x4>

08000a3c <_init>:
 8000a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a3e:	bf00      	nop
 8000a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a42:	bc08      	pop	{r3}
 8000a44:	469e      	mov	lr, r3
 8000a46:	4770      	bx	lr

08000a48 <_fini>:
 8000a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a4a:	bf00      	nop
 8000a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a4e:	bc08      	pop	{r3}
 8000a50:	469e      	mov	lr, r3
 8000a52:	4770      	bx	lr
