
stm32f4xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006fc  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080008a4  080008ac  000108ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080008a4  080008a4  000108ac  2**0
                  CONTENTS
  4 .ARM          00000000  080008a4  080008a4  000108ac  2**0
                  CONTENTS
  5 .preinit_array 00000000  080008a4  080008ac  000108ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080008a4  080008a4  000108a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080008a8  080008a8  000108a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000108ac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000108ac  2**0
                  CONTENTS
 10 .bss          0000001c  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000001c  2000001c  00020000  2**0
                  ALLOC
 12 .ARM.attributes 0000002a  00000000  00000000  000108ac  2**0
                  CONTENTS, READONLY
 13 .debug_info   00000a1a  00000000  00000000  000108d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000029f  00000000  00000000  000112f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000000b8  00000000  00000000  00011590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000090  00000000  00000000  00011648  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000237e  00000000  00000000  000116d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000011ac  00000000  00000000  00013a56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00009536  00000000  00000000  00014c02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0001e138  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000224  00000000  00000000  0001e188  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	0800088c 	.word	0x0800088c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	0800088c 	.word	0x0800088c

080001e8 <main>:
#define HIGH			1
#define BTN_PRESSED		HIGH

void delay(uint32_t value);

int main(void) {
 80001e8:	b580      	push	{r7, lr}
 80001ea:	b086      	sub	sp, #24
 80001ec:	af00      	add	r7, sp, #0

	GPIO_Handle_t gpio_led, gpio_btn;

	// Configure LED
	gpio_led.pGPIOx = GPIOD;
 80001ee:	4b1b      	ldr	r3, [pc, #108]	; (800025c <main+0x74>)
 80001f0:	60fb      	str	r3, [r7, #12]
	gpio_led.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_12;
 80001f2:	230c      	movs	r3, #12
 80001f4:	743b      	strb	r3, [r7, #16]
	gpio_led.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_OUT;
 80001f6:	2301      	movs	r3, #1
 80001f8:	747b      	strb	r3, [r7, #17]
	gpio_led.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 80001fa:	2302      	movs	r3, #2
 80001fc:	74bb      	strb	r3, [r7, #18]
	gpio_led.GPIO_PinConfig.GPIO_PinOPType =  GPIO_OTYPE_PP;
 80001fe:	2300      	movs	r3, #0
 8000200:	753b      	strb	r3, [r7, #20]
	gpio_led.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_NO;
 8000202:	2300      	movs	r3, #0
 8000204:	74fb      	strb	r3, [r7, #19]

	GPIO_PeriphClkCtrl(GPIOD, ENABLE);
 8000206:	2101      	movs	r1, #1
 8000208:	4814      	ldr	r0, [pc, #80]	; (800025c <main+0x74>)
 800020a:	f000 f86b 	bl	80002e4 <GPIO_PeriphClkCtrl>
	GPIO_Init(&gpio_led);
 800020e:	f107 030c 	add.w	r3, r7, #12
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f94e 	bl	80004b4 <GPIO_Init>

	// Configure btn
	gpio_btn.pGPIOx = GPIOA;
 8000218:	4b11      	ldr	r3, [pc, #68]	; (8000260 <main+0x78>)
 800021a:	603b      	str	r3, [r7, #0]
	gpio_btn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_0;
 800021c:	2300      	movs	r3, #0
 800021e:	713b      	strb	r3, [r7, #4]
	gpio_btn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000220:	2300      	movs	r3, #0
 8000222:	717b      	strb	r3, [r7, #5]
	gpio_btn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_HIGH;
 8000224:	2302      	movs	r3, #2
 8000226:	71bb      	strb	r3, [r7, #6]
	gpio_btn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PUPD_NO;
 8000228:	2300      	movs	r3, #0
 800022a:	71fb      	strb	r3, [r7, #7]

	GPIO_PeriphClkCtrl(GPIOA, ENABLE);
 800022c:	2101      	movs	r1, #1
 800022e:	480c      	ldr	r0, [pc, #48]	; (8000260 <main+0x78>)
 8000230:	f000 f858 	bl	80002e4 <GPIO_PeriphClkCtrl>
	GPIO_Init(&gpio_btn);
 8000234:	463b      	mov	r3, r7
 8000236:	4618      	mov	r0, r3
 8000238:	f000 f93c 	bl	80004b4 <GPIO_Init>

	// Infinite loop
	while(1) {
		if (GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0 == BTN_PRESSED)) {
 800023c:	2100      	movs	r1, #0
 800023e:	4808      	ldr	r0, [pc, #32]	; (8000260 <main+0x78>)
 8000240:	f000 fad6 	bl	80007f0 <GPIO_ReadFromInputPin>
 8000244:	4603      	mov	r3, r0
 8000246:	2b00      	cmp	r3, #0
 8000248:	d0f8      	beq.n	800023c <main+0x54>
			delay(250000);
 800024a:	4806      	ldr	r0, [pc, #24]	; (8000264 <main+0x7c>)
 800024c:	f000 f80c 	bl	8000268 <delay>
			GPIO_Toggle(GPIOD, GPIO_PIN_12);
 8000250:	210c      	movs	r1, #12
 8000252:	4802      	ldr	r0, [pc, #8]	; (800025c <main+0x74>)
 8000254:	f000 fae1 	bl	800081a <GPIO_Toggle>
		if (GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_0 == BTN_PRESSED)) {
 8000258:	e7f0      	b.n	800023c <main+0x54>
 800025a:	bf00      	nop
 800025c:	40020c00 	.word	0x40020c00
 8000260:	40020000 	.word	0x40020000
 8000264:	0003d090 	.word	0x0003d090

08000268 <delay>:
	}
}



void delay(uint32_t value) {
 8000268:	b480      	push	{r7}
 800026a:	b085      	sub	sp, #20
 800026c:	af00      	add	r7, sp, #0
 800026e:	6078      	str	r0, [r7, #4]

	for (uint32_t i = 0; i < value; i++);
 8000270:	2300      	movs	r3, #0
 8000272:	60fb      	str	r3, [r7, #12]
 8000274:	e002      	b.n	800027c <delay+0x14>
 8000276:	68fb      	ldr	r3, [r7, #12]
 8000278:	3301      	adds	r3, #1
 800027a:	60fb      	str	r3, [r7, #12]
 800027c:	68fa      	ldr	r2, [r7, #12]
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	429a      	cmp	r2, r3
 8000282:	d3f8      	bcc.n	8000276 <delay+0xe>
}
 8000284:	bf00      	nop
 8000286:	bf00      	nop
 8000288:	3714      	adds	r7, #20
 800028a:	46bd      	mov	sp, r7
 800028c:	bc80      	pop	{r7}
 800028e:	4770      	bx	lr

08000290 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000290:	480d      	ldr	r0, [pc, #52]	; (80002c8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000292:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000294:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000298:	480c      	ldr	r0, [pc, #48]	; (80002cc <LoopForever+0x6>)
  ldr r1, =_edata
 800029a:	490d      	ldr	r1, [pc, #52]	; (80002d0 <LoopForever+0xa>)
  ldr r2, =_sidata
 800029c:	4a0d      	ldr	r2, [pc, #52]	; (80002d4 <LoopForever+0xe>)
  movs r3, #0
 800029e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002a0:	e002      	b.n	80002a8 <LoopCopyDataInit>

080002a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002a6:	3304      	adds	r3, #4

080002a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002ac:	d3f9      	bcc.n	80002a2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002ae:	4a0a      	ldr	r2, [pc, #40]	; (80002d8 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002b0:	4c0a      	ldr	r4, [pc, #40]	; (80002dc <LoopForever+0x16>)
  movs r3, #0
 80002b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002b4:	e001      	b.n	80002ba <LoopFillZerobss>

080002b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002b8:	3204      	adds	r2, #4

080002ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002bc:	d3fb      	bcc.n	80002b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002be:	f000 fac1 	bl	8000844 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002c2:	f7ff ff91 	bl	80001e8 <main>

080002c6 <LoopForever>:

LoopForever:
    b LoopForever
 80002c6:	e7fe      	b.n	80002c6 <LoopForever>
  ldr   r0, =_estack
 80002c8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002cc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002d0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002d4:	080008ac 	.word	0x080008ac
  ldr r2, =_sbss
 80002d8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002dc:	2000001c 	.word	0x2000001c

080002e0 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002e0:	e7fe      	b.n	80002e0 <ADC_IRQHandler>
	...

080002e4 <GPIO_PeriphClkCtrl>:
 *
 * @return			- none
 *
 * @Note			- none
*/
void GPIO_PeriphClkCtrl (GPIO_RegDef_t *pGPIOx, uint8_t EnOrDi) {
 80002e4:	b480      	push	{r7}
 80002e6:	b083      	sub	sp, #12
 80002e8:	af00      	add	r7, sp, #0
 80002ea:	6078      	str	r0, [r7, #4]
 80002ec:	460b      	mov	r3, r1
 80002ee:	70fb      	strb	r3, [r7, #3]

	if (EnOrDi == ENABLE) {
 80002f0:	78fb      	ldrb	r3, [r7, #3]
 80002f2:	2b01      	cmp	r3, #1
 80002f4:	d162      	bne.n	80003bc <GPIO_PeriphClkCtrl+0xd8>
		if (pGPIOx == GPIOA) {
 80002f6:	687b      	ldr	r3, [r7, #4]
 80002f8:	4a64      	ldr	r2, [pc, #400]	; (800048c <GPIO_PeriphClkCtrl+0x1a8>)
 80002fa:	4293      	cmp	r3, r2
 80002fc:	d106      	bne.n	800030c <GPIO_PeriphClkCtrl+0x28>
			GPIOA_PCLCK_EN();
 80002fe:	4b64      	ldr	r3, [pc, #400]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 8000300:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000302:	4a63      	ldr	r2, [pc, #396]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 8000304:	f043 0301 	orr.w	r3, r3, #1
 8000308:	6313      	str	r3, [r2, #48]	; 0x30
		}
		else if (pGPIOx == GPIOI) {
			GPIOI_PCLCK_DI();
		}
	}
}
 800030a:	e0b9      	b.n	8000480 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOB) {
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	4a61      	ldr	r2, [pc, #388]	; (8000494 <GPIO_PeriphClkCtrl+0x1b0>)
 8000310:	4293      	cmp	r3, r2
 8000312:	d106      	bne.n	8000322 <GPIO_PeriphClkCtrl+0x3e>
			GPIOB_PCLCK_EN();
 8000314:	4b5e      	ldr	r3, [pc, #376]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 8000316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000318:	4a5d      	ldr	r2, [pc, #372]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 800031a:	f043 0302 	orr.w	r3, r3, #2
 800031e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000320:	e0ae      	b.n	8000480 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOC) {
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	4a5c      	ldr	r2, [pc, #368]	; (8000498 <GPIO_PeriphClkCtrl+0x1b4>)
 8000326:	4293      	cmp	r3, r2
 8000328:	d106      	bne.n	8000338 <GPIO_PeriphClkCtrl+0x54>
			GPIOC_PCLCK_EN();
 800032a:	4b59      	ldr	r3, [pc, #356]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 800032c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800032e:	4a58      	ldr	r2, [pc, #352]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 8000330:	f043 0304 	orr.w	r3, r3, #4
 8000334:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000336:	e0a3      	b.n	8000480 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOD) {
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	4a58      	ldr	r2, [pc, #352]	; (800049c <GPIO_PeriphClkCtrl+0x1b8>)
 800033c:	4293      	cmp	r3, r2
 800033e:	d106      	bne.n	800034e <GPIO_PeriphClkCtrl+0x6a>
			GPIOD_PCLCK_EN();
 8000340:	4b53      	ldr	r3, [pc, #332]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 8000342:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000344:	4a52      	ldr	r2, [pc, #328]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 8000346:	f043 0308 	orr.w	r3, r3, #8
 800034a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800034c:	e098      	b.n	8000480 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOE) {
 800034e:	687b      	ldr	r3, [r7, #4]
 8000350:	4a53      	ldr	r2, [pc, #332]	; (80004a0 <GPIO_PeriphClkCtrl+0x1bc>)
 8000352:	4293      	cmp	r3, r2
 8000354:	d106      	bne.n	8000364 <GPIO_PeriphClkCtrl+0x80>
			GPIOE_PCLCK_EN();
 8000356:	4b4e      	ldr	r3, [pc, #312]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 8000358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800035a:	4a4d      	ldr	r2, [pc, #308]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 800035c:	f043 0310 	orr.w	r3, r3, #16
 8000360:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000362:	e08d      	b.n	8000480 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOF) {
 8000364:	687b      	ldr	r3, [r7, #4]
 8000366:	4a4f      	ldr	r2, [pc, #316]	; (80004a4 <GPIO_PeriphClkCtrl+0x1c0>)
 8000368:	4293      	cmp	r3, r2
 800036a:	d106      	bne.n	800037a <GPIO_PeriphClkCtrl+0x96>
			GPIOF_PCLCK_EN();
 800036c:	4b48      	ldr	r3, [pc, #288]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 800036e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000370:	4a47      	ldr	r2, [pc, #284]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 8000372:	f043 0320 	orr.w	r3, r3, #32
 8000376:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000378:	e082      	b.n	8000480 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOG) {
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4a4a      	ldr	r2, [pc, #296]	; (80004a8 <GPIO_PeriphClkCtrl+0x1c4>)
 800037e:	4293      	cmp	r3, r2
 8000380:	d106      	bne.n	8000390 <GPIO_PeriphClkCtrl+0xac>
			GPIOG_PCLCK_EN();
 8000382:	4b43      	ldr	r3, [pc, #268]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 8000384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000386:	4a42      	ldr	r2, [pc, #264]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 8000388:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800038c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800038e:	e077      	b.n	8000480 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOH) {
 8000390:	687b      	ldr	r3, [r7, #4]
 8000392:	4a46      	ldr	r2, [pc, #280]	; (80004ac <GPIO_PeriphClkCtrl+0x1c8>)
 8000394:	4293      	cmp	r3, r2
 8000396:	d106      	bne.n	80003a6 <GPIO_PeriphClkCtrl+0xc2>
			GPIOH_PCLCK_EN();
 8000398:	4b3d      	ldr	r3, [pc, #244]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 800039a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800039c:	4a3c      	ldr	r2, [pc, #240]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 800039e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80003a2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003a4:	e06c      	b.n	8000480 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOI) {
 80003a6:	687b      	ldr	r3, [r7, #4]
 80003a8:	4a41      	ldr	r2, [pc, #260]	; (80004b0 <GPIO_PeriphClkCtrl+0x1cc>)
 80003aa:	4293      	cmp	r3, r2
 80003ac:	d168      	bne.n	8000480 <GPIO_PeriphClkCtrl+0x19c>
			GPIOI_PCLCK_EN();
 80003ae:	4b38      	ldr	r3, [pc, #224]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 80003b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003b2:	4a37      	ldr	r2, [pc, #220]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 80003b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80003b8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003ba:	e061      	b.n	8000480 <GPIO_PeriphClkCtrl+0x19c>
		if (pGPIOx == GPIOA) {
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	4a33      	ldr	r2, [pc, #204]	; (800048c <GPIO_PeriphClkCtrl+0x1a8>)
 80003c0:	4293      	cmp	r3, r2
 80003c2:	d106      	bne.n	80003d2 <GPIO_PeriphClkCtrl+0xee>
			GPIOA_PCLCK_DI();
 80003c4:	4b32      	ldr	r3, [pc, #200]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 80003c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003c8:	4a31      	ldr	r2, [pc, #196]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 80003ca:	f023 0301 	bic.w	r3, r3, #1
 80003ce:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003d0:	e056      	b.n	8000480 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOB) {
 80003d2:	687b      	ldr	r3, [r7, #4]
 80003d4:	4a2f      	ldr	r2, [pc, #188]	; (8000494 <GPIO_PeriphClkCtrl+0x1b0>)
 80003d6:	4293      	cmp	r3, r2
 80003d8:	d106      	bne.n	80003e8 <GPIO_PeriphClkCtrl+0x104>
			GPIOB_PCLCK_DI();
 80003da:	4b2d      	ldr	r3, [pc, #180]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 80003dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003de:	4a2c      	ldr	r2, [pc, #176]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 80003e0:	f023 0302 	bic.w	r3, r3, #2
 80003e4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e6:	e04b      	b.n	8000480 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOC) {
 80003e8:	687b      	ldr	r3, [r7, #4]
 80003ea:	4a2b      	ldr	r2, [pc, #172]	; (8000498 <GPIO_PeriphClkCtrl+0x1b4>)
 80003ec:	4293      	cmp	r3, r2
 80003ee:	d106      	bne.n	80003fe <GPIO_PeriphClkCtrl+0x11a>
			GPIOC_PCLCK_DI();
 80003f0:	4b27      	ldr	r3, [pc, #156]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 80003f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f4:	4a26      	ldr	r2, [pc, #152]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 80003f6:	f023 0304 	bic.w	r3, r3, #4
 80003fa:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fc:	e040      	b.n	8000480 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOD) {
 80003fe:	687b      	ldr	r3, [r7, #4]
 8000400:	4a26      	ldr	r2, [pc, #152]	; (800049c <GPIO_PeriphClkCtrl+0x1b8>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d106      	bne.n	8000414 <GPIO_PeriphClkCtrl+0x130>
			GPIOD_PCLCK_DI();
 8000406:	4b22      	ldr	r3, [pc, #136]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 8000408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040a:	4a21      	ldr	r2, [pc, #132]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 800040c:	f023 0308 	bic.w	r3, r3, #8
 8000410:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000412:	e035      	b.n	8000480 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOE) {
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	4a22      	ldr	r2, [pc, #136]	; (80004a0 <GPIO_PeriphClkCtrl+0x1bc>)
 8000418:	4293      	cmp	r3, r2
 800041a:	d106      	bne.n	800042a <GPIO_PeriphClkCtrl+0x146>
			GPIOE_PCLCK_DI();
 800041c:	4b1c      	ldr	r3, [pc, #112]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 800041e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000420:	4a1b      	ldr	r2, [pc, #108]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 8000422:	f023 0310 	bic.w	r3, r3, #16
 8000426:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000428:	e02a      	b.n	8000480 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOF) {
 800042a:	687b      	ldr	r3, [r7, #4]
 800042c:	4a1d      	ldr	r2, [pc, #116]	; (80004a4 <GPIO_PeriphClkCtrl+0x1c0>)
 800042e:	4293      	cmp	r3, r2
 8000430:	d106      	bne.n	8000440 <GPIO_PeriphClkCtrl+0x15c>
			GPIOF_PCLCK_DI();
 8000432:	4b17      	ldr	r3, [pc, #92]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 8000434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000436:	4a16      	ldr	r2, [pc, #88]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 8000438:	f023 0320 	bic.w	r3, r3, #32
 800043c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800043e:	e01f      	b.n	8000480 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOG) {
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	4a19      	ldr	r2, [pc, #100]	; (80004a8 <GPIO_PeriphClkCtrl+0x1c4>)
 8000444:	4293      	cmp	r3, r2
 8000446:	d106      	bne.n	8000456 <GPIO_PeriphClkCtrl+0x172>
			GPIOG_PCLCK_DI();
 8000448:	4b11      	ldr	r3, [pc, #68]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 800044a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044c:	4a10      	ldr	r2, [pc, #64]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 800044e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000452:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000454:	e014      	b.n	8000480 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOH) {
 8000456:	687b      	ldr	r3, [r7, #4]
 8000458:	4a14      	ldr	r2, [pc, #80]	; (80004ac <GPIO_PeriphClkCtrl+0x1c8>)
 800045a:	4293      	cmp	r3, r2
 800045c:	d106      	bne.n	800046c <GPIO_PeriphClkCtrl+0x188>
			GPIOH_PCLCK_DI();
 800045e:	4b0c      	ldr	r3, [pc, #48]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 8000460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000462:	4a0b      	ldr	r2, [pc, #44]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 8000464:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000468:	6313      	str	r3, [r2, #48]	; 0x30
}
 800046a:	e009      	b.n	8000480 <GPIO_PeriphClkCtrl+0x19c>
		else if (pGPIOx == GPIOI) {
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	4a10      	ldr	r2, [pc, #64]	; (80004b0 <GPIO_PeriphClkCtrl+0x1cc>)
 8000470:	4293      	cmp	r3, r2
 8000472:	d105      	bne.n	8000480 <GPIO_PeriphClkCtrl+0x19c>
			GPIOI_PCLCK_DI();
 8000474:	4b06      	ldr	r3, [pc, #24]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 8000476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000478:	4a05      	ldr	r2, [pc, #20]	; (8000490 <GPIO_PeriphClkCtrl+0x1ac>)
 800047a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800047e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000480:	bf00      	nop
 8000482:	370c      	adds	r7, #12
 8000484:	46bd      	mov	sp, r7
 8000486:	bc80      	pop	{r7}
 8000488:	4770      	bx	lr
 800048a:	bf00      	nop
 800048c:	40020000 	.word	0x40020000
 8000490:	40023800 	.word	0x40023800
 8000494:	40020400 	.word	0x40020400
 8000498:	40020800 	.word	0x40020800
 800049c:	40020c00 	.word	0x40020c00
 80004a0:	40021000 	.word	0x40021000
 80004a4:	40021400 	.word	0x40021400
 80004a8:	40021800 	.word	0x40021800
 80004ac:	40021c00 	.word	0x40021c00
 80004b0:	40022000 	.word	0x40022000

080004b4 <GPIO_Init>:
 *
 * @return			- none
 *
 * @Note			- none
*/
void GPIO_Init (GPIO_Handle_t *pGPIOHandle) {
 80004b4:	b480      	push	{r7}
 80004b6:	b087      	sub	sp, #28
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	6078      	str	r0, [r7, #4]

	uint32_t temp = 0;
 80004bc:	2300      	movs	r3, #0
 80004be:	617b      	str	r3, [r7, #20]

	// 1. Configure GPIO pin mode
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) {
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	795b      	ldrb	r3, [r3, #5]
 80004c4:	2b03      	cmp	r3, #3
 80004c6:	d822      	bhi.n	800050e <GPIO_Init+0x5a>
		// Non-interupt mode

		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << ( 2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));		// Get the mode and the pin number
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	795b      	ldrb	r3, [r3, #5]
 80004cc:	461a      	mov	r2, r3
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	791b      	ldrb	r3, [r3, #4]
 80004d2:	005b      	lsls	r3, r3, #1
 80004d4:	fa02 f303 	lsl.w	r3, r2, r3
 80004d8:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );					// Clear bits
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	681a      	ldr	r2, [r3, #0]
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	791b      	ldrb	r3, [r3, #4]
 80004e4:	005b      	lsls	r3, r3, #1
 80004e6:	2103      	movs	r1, #3
 80004e8:	fa01 f303 	lsl.w	r3, r1, r3
 80004ec:	43db      	mvns	r3, r3
 80004ee:	4619      	mov	r1, r3
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	400a      	ands	r2, r1
 80004f6:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;																			// Store the value of temp in the mode register
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	6819      	ldr	r1, [r3, #0]
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	697a      	ldr	r2, [r7, #20]
 8000504:	430a      	orrs	r2, r1
 8000506:	601a      	str	r2, [r3, #0]
		temp = 0;
 8000508:	2300      	movs	r3, #0
 800050a:	617b      	str	r3, [r7, #20]
 800050c:	e0c8      	b.n	80006a0 <GPIO_Init+0x1ec>
	}
	else {
		// Interupt mode
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT) {
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	795b      	ldrb	r3, [r3, #5]
 8000512:	2b04      	cmp	r3, #4
 8000514:	d117      	bne.n	8000546 <GPIO_Init+0x92>
			// 1. Configure FTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000516:	4b47      	ldr	r3, [pc, #284]	; (8000634 <GPIO_Init+0x180>)
 8000518:	68db      	ldr	r3, [r3, #12]
 800051a:	687a      	ldr	r2, [r7, #4]
 800051c:	7912      	ldrb	r2, [r2, #4]
 800051e:	4611      	mov	r1, r2
 8000520:	2201      	movs	r2, #1
 8000522:	408a      	lsls	r2, r1
 8000524:	4611      	mov	r1, r2
 8000526:	4a43      	ldr	r2, [pc, #268]	; (8000634 <GPIO_Init+0x180>)
 8000528:	430b      	orrs	r3, r1
 800052a:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		// Clear corresponding RTSR bit
 800052c:	4b41      	ldr	r3, [pc, #260]	; (8000634 <GPIO_Init+0x180>)
 800052e:	689b      	ldr	r3, [r3, #8]
 8000530:	687a      	ldr	r2, [r7, #4]
 8000532:	7912      	ldrb	r2, [r2, #4]
 8000534:	4611      	mov	r1, r2
 8000536:	2201      	movs	r2, #1
 8000538:	408a      	lsls	r2, r1
 800053a:	43d2      	mvns	r2, r2
 800053c:	4611      	mov	r1, r2
 800053e:	4a3d      	ldr	r2, [pc, #244]	; (8000634 <GPIO_Init+0x180>)
 8000540:	400b      	ands	r3, r1
 8000542:	6093      	str	r3, [r2, #8]
 8000544:	e035      	b.n	80005b2 <GPIO_Init+0xfe>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT) {
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	795b      	ldrb	r3, [r3, #5]
 800054a:	2b05      	cmp	r3, #5
 800054c:	d117      	bne.n	800057e <GPIO_Init+0xca>
			// 1. Configure RTSR
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800054e:	4b39      	ldr	r3, [pc, #228]	; (8000634 <GPIO_Init+0x180>)
 8000550:	689b      	ldr	r3, [r3, #8]
 8000552:	687a      	ldr	r2, [r7, #4]
 8000554:	7912      	ldrb	r2, [r2, #4]
 8000556:	4611      	mov	r1, r2
 8000558:	2201      	movs	r2, #1
 800055a:	408a      	lsls	r2, r1
 800055c:	4611      	mov	r1, r2
 800055e:	4a35      	ldr	r2, [pc, #212]	; (8000634 <GPIO_Init+0x180>)
 8000560:	430b      	orrs	r3, r1
 8000562:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);		// Clear correspongind FTSR bit
 8000564:	4b33      	ldr	r3, [pc, #204]	; (8000634 <GPIO_Init+0x180>)
 8000566:	68db      	ldr	r3, [r3, #12]
 8000568:	687a      	ldr	r2, [r7, #4]
 800056a:	7912      	ldrb	r2, [r2, #4]
 800056c:	4611      	mov	r1, r2
 800056e:	2201      	movs	r2, #1
 8000570:	408a      	lsls	r2, r1
 8000572:	43d2      	mvns	r2, r2
 8000574:	4611      	mov	r1, r2
 8000576:	4a2f      	ldr	r2, [pc, #188]	; (8000634 <GPIO_Init+0x180>)
 8000578:	400b      	ands	r3, r1
 800057a:	60d3      	str	r3, [r2, #12]
 800057c:	e019      	b.n	80005b2 <GPIO_Init+0xfe>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT) {
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	795b      	ldrb	r3, [r3, #5]
 8000582:	2b06      	cmp	r3, #6
 8000584:	d115      	bne.n	80005b2 <GPIO_Init+0xfe>
			// 1. Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000586:	4b2b      	ldr	r3, [pc, #172]	; (8000634 <GPIO_Init+0x180>)
 8000588:	68db      	ldr	r3, [r3, #12]
 800058a:	687a      	ldr	r2, [r7, #4]
 800058c:	7912      	ldrb	r2, [r2, #4]
 800058e:	4611      	mov	r1, r2
 8000590:	2201      	movs	r2, #1
 8000592:	408a      	lsls	r2, r1
 8000594:	4611      	mov	r1, r2
 8000596:	4a27      	ldr	r2, [pc, #156]	; (8000634 <GPIO_Init+0x180>)
 8000598:	430b      	orrs	r3, r1
 800059a:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800059c:	4b25      	ldr	r3, [pc, #148]	; (8000634 <GPIO_Init+0x180>)
 800059e:	689b      	ldr	r3, [r3, #8]
 80005a0:	687a      	ldr	r2, [r7, #4]
 80005a2:	7912      	ldrb	r2, [r2, #4]
 80005a4:	4611      	mov	r1, r2
 80005a6:	2201      	movs	r2, #1
 80005a8:	408a      	lsls	r2, r1
 80005aa:	4611      	mov	r1, r2
 80005ac:	4a21      	ldr	r2, [pc, #132]	; (8000634 <GPIO_Init+0x180>)
 80005ae:	430b      	orrs	r3, r1
 80005b0:	6093      	str	r3, [r2, #8]

		// 2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t exti_temp1, exti_temp2;
		uint8_t portcode;

		exti_temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	791b      	ldrb	r3, [r3, #4]
 80005b6:	089b      	lsrs	r3, r3, #2
 80005b8:	74fb      	strb	r3, [r7, #19]
		exti_temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	791b      	ldrb	r3, [r3, #4]
 80005be:	f003 0303 	and.w	r3, r3, #3
 80005c2:	74bb      	strb	r3, [r7, #18]
		portcode = GPIO_BASE_ADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	4a1b      	ldr	r2, [pc, #108]	; (8000638 <GPIO_Init+0x184>)
 80005ca:	4293      	cmp	r3, r2
 80005cc:	d044      	beq.n	8000658 <GPIO_Init+0x1a4>
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a1a      	ldr	r2, [pc, #104]	; (800063c <GPIO_Init+0x188>)
 80005d4:	4293      	cmp	r3, r2
 80005d6:	d02b      	beq.n	8000630 <GPIO_Init+0x17c>
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	4a18      	ldr	r2, [pc, #96]	; (8000640 <GPIO_Init+0x18c>)
 80005de:	4293      	cmp	r3, r2
 80005e0:	d024      	beq.n	800062c <GPIO_Init+0x178>
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	4a17      	ldr	r2, [pc, #92]	; (8000644 <GPIO_Init+0x190>)
 80005e8:	4293      	cmp	r3, r2
 80005ea:	d01d      	beq.n	8000628 <GPIO_Init+0x174>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	4a15      	ldr	r2, [pc, #84]	; (8000648 <GPIO_Init+0x194>)
 80005f2:	4293      	cmp	r3, r2
 80005f4:	d016      	beq.n	8000624 <GPIO_Init+0x170>
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a14      	ldr	r2, [pc, #80]	; (800064c <GPIO_Init+0x198>)
 80005fc:	4293      	cmp	r3, r2
 80005fe:	d00f      	beq.n	8000620 <GPIO_Init+0x16c>
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	4a12      	ldr	r2, [pc, #72]	; (8000650 <GPIO_Init+0x19c>)
 8000606:	4293      	cmp	r3, r2
 8000608:	d008      	beq.n	800061c <GPIO_Init+0x168>
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	681b      	ldr	r3, [r3, #0]
 800060e:	4a11      	ldr	r2, [pc, #68]	; (8000654 <GPIO_Init+0x1a0>)
 8000610:	4293      	cmp	r3, r2
 8000612:	d101      	bne.n	8000618 <GPIO_Init+0x164>
 8000614:	2307      	movs	r3, #7
 8000616:	e020      	b.n	800065a <GPIO_Init+0x1a6>
 8000618:	2308      	movs	r3, #8
 800061a:	e01e      	b.n	800065a <GPIO_Init+0x1a6>
 800061c:	2306      	movs	r3, #6
 800061e:	e01c      	b.n	800065a <GPIO_Init+0x1a6>
 8000620:	2305      	movs	r3, #5
 8000622:	e01a      	b.n	800065a <GPIO_Init+0x1a6>
 8000624:	2304      	movs	r3, #4
 8000626:	e018      	b.n	800065a <GPIO_Init+0x1a6>
 8000628:	2303      	movs	r3, #3
 800062a:	e016      	b.n	800065a <GPIO_Init+0x1a6>
 800062c:	2302      	movs	r3, #2
 800062e:	e014      	b.n	800065a <GPIO_Init+0x1a6>
 8000630:	2301      	movs	r3, #1
 8000632:	e012      	b.n	800065a <GPIO_Init+0x1a6>
 8000634:	40013c00 	.word	0x40013c00
 8000638:	40020000 	.word	0x40020000
 800063c:	40020400 	.word	0x40020400
 8000640:	40020800 	.word	0x40020800
 8000644:	40020c00 	.word	0x40020c00
 8000648:	40021000 	.word	0x40021000
 800064c:	40021400 	.word	0x40021400
 8000650:	40021800 	.word	0x40021800
 8000654:	40021c00 	.word	0x40021c00
 8000658:	2300      	movs	r3, #0
 800065a:	747b      	strb	r3, [r7, #17]

		SYSCFG_PCLK_EN();
 800065c:	4b61      	ldr	r3, [pc, #388]	; (80007e4 <GPIO_Init+0x330>)
 800065e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000660:	4a60      	ldr	r2, [pc, #384]	; (80007e4 <GPIO_Init+0x330>)
 8000662:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000666:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[exti_temp1] |= portcode << (4*exti_temp2);
 8000668:	4a5f      	ldr	r2, [pc, #380]	; (80007e8 <GPIO_Init+0x334>)
 800066a:	7cfb      	ldrb	r3, [r7, #19]
 800066c:	3302      	adds	r3, #2
 800066e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000672:	7c79      	ldrb	r1, [r7, #17]
 8000674:	7cbb      	ldrb	r3, [r7, #18]
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	fa01 f303 	lsl.w	r3, r1, r3
 800067c:	4618      	mov	r0, r3
 800067e:	495a      	ldr	r1, [pc, #360]	; (80007e8 <GPIO_Init+0x334>)
 8000680:	7cfb      	ldrb	r3, [r7, #19]
 8000682:	4302      	orrs	r2, r0
 8000684:	3302      	adds	r3, #2
 8000686:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		// 3. Enable EXTI interrupt delivery using IMR
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800068a:	4b58      	ldr	r3, [pc, #352]	; (80007ec <GPIO_Init+0x338>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	7912      	ldrb	r2, [r2, #4]
 8000692:	4611      	mov	r1, r2
 8000694:	2201      	movs	r2, #1
 8000696:	408a      	lsls	r2, r1
 8000698:	4611      	mov	r1, r2
 800069a:	4a54      	ldr	r2, [pc, #336]	; (80007ec <GPIO_Init+0x338>)
 800069c:	430b      	orrs	r3, r1
 800069e:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	617b      	str	r3, [r7, #20]

	// 2. Configure GPIO speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));		// Get the speed and pin number
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	799b      	ldrb	r3, [r3, #6]
 80006a8:	461a      	mov	r2, r3
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	791b      	ldrb	r3, [r3, #4]
 80006ae:	005b      	lsls	r3, r3, #1
 80006b0:	fa02 f303 	lsl.w	r3, r2, r3
 80006b4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );						// Clear bits
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	689a      	ldr	r2, [r3, #8]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	791b      	ldrb	r3, [r3, #4]
 80006c0:	4619      	mov	r1, r3
 80006c2:	2303      	movs	r3, #3
 80006c4:	408b      	lsls	r3, r1
 80006c6:	43db      	mvns	r3, r3
 80006c8:	4619      	mov	r1, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	400a      	ands	r2, r1
 80006d0:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;																		// Store the value of temp in the speed register
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	6899      	ldr	r1, [r3, #8]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	697a      	ldr	r2, [r7, #20]
 80006de:	430a      	orrs	r2, r1
 80006e0:	609a      	str	r2, [r3, #8]
	temp = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	617b      	str	r3, [r7, #20]

	// 3. Configure GPIO pull-up/pull-down
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ));		// Get PuPd and pin number
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	79db      	ldrb	r3, [r3, #7]
 80006ea:	461a      	mov	r2, r3
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	791b      	ldrb	r3, [r3, #4]
 80006f0:	005b      	lsls	r3, r3, #1
 80006f2:	fa02 f303 	lsl.w	r3, r2, r3
 80006f6:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << (2*pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );							// Clear bits
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	68da      	ldr	r2, [r3, #12]
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	791b      	ldrb	r3, [r3, #4]
 8000702:	005b      	lsls	r3, r3, #1
 8000704:	2103      	movs	r1, #3
 8000706:	fa01 f303 	lsl.w	r3, r1, r3
 800070a:	43db      	mvns	r3, r3
 800070c:	4619      	mov	r1, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	400a      	ands	r2, r1
 8000714:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;																					// Store the value of temp in pull-up/pull-down register
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	68d9      	ldr	r1, [r3, #12]
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	697a      	ldr	r2, [r7, #20]
 8000722:	430a      	orrs	r2, r1
 8000724:	60da      	str	r2, [r3, #12]
	temp = 0;
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]

	// 4. Configure output type register
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );		// Get output type and pin number
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	7a1b      	ldrb	r3, [r3, #8]
 800072e:	461a      	mov	r2, r3
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	791b      	ldrb	r3, [r3, #4]
 8000734:	fa02 f303 	lsl.w	r3, r2, r3
 8000738:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );					// Clear bits
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	685a      	ldr	r2, [r3, #4]
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	791b      	ldrb	r3, [r3, #4]
 8000744:	4619      	mov	r1, r3
 8000746:	2301      	movs	r3, #1
 8000748:	408b      	lsls	r3, r1
 800074a:	43db      	mvns	r3, r3
 800074c:	4619      	mov	r1, r3
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	400a      	ands	r2, r1
 8000754:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;																	// Store the values of temp in output type register
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	6859      	ldr	r1, [r3, #4]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	697a      	ldr	r2, [r7, #20]
 8000762:	430a      	orrs	r2, r1
 8000764:	605a      	str	r2, [r3, #4]
	temp = 0;
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]

	// 5. Configure alternate function register
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_AF) {
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	795b      	ldrb	r3, [r3, #5]
 800076e:	2b02      	cmp	r3, #2
 8000770:	d133      	bne.n	80007da <GPIO_Init+0x326>
		uint8_t temp1, temp2 = 0;
 8000772:	2300      	movs	r3, #0
 8000774:	743b      	strb	r3, [r7, #16]

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;												// Get the register 0 (AFL) or 1 (AFH)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	791b      	ldrb	r3, [r3, #4]
 800077a:	08db      	lsrs	r3, r3, #3
 800077c:	73fb      	strb	r3, [r7, #15]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;												// Get the pin number
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	791b      	ldrb	r3, [r3, #4]
 8000782:	f003 0307 	and.w	r3, r3, #7
 8000786:	743b      	strb	r3, [r7, #16]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~( 0xF << (4*temp2) );													// Clear bits
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	7bfa      	ldrb	r2, [r7, #15]
 800078e:	3208      	adds	r2, #8
 8000790:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000794:	7c3b      	ldrb	r3, [r7, #16]
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	220f      	movs	r2, #15
 800079a:	fa02 f303 	lsl.w	r3, r2, r3
 800079e:	43db      	mvns	r3, r3
 80007a0:	4618      	mov	r0, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	7bfa      	ldrb	r2, [r7, #15]
 80007a8:	4001      	ands	r1, r0
 80007aa:	3208      	adds	r2, #8
 80007ac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4*temp2));	// Store the values in temp2 in register[temp1]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	7bfa      	ldrb	r2, [r7, #15]
 80007b6:	3208      	adds	r2, #8
 80007b8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	7a5b      	ldrb	r3, [r3, #9]
 80007c0:	461a      	mov	r2, r3
 80007c2:	7c3b      	ldrb	r3, [r7, #16]
 80007c4:	009b      	lsls	r3, r3, #2
 80007c6:	fa02 f303 	lsl.w	r3, r2, r3
 80007ca:	4618      	mov	r0, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	7bfa      	ldrb	r2, [r7, #15]
 80007d2:	4301      	orrs	r1, r0
 80007d4:	3208      	adds	r2, #8
 80007d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
	else {
		// nothing to be done
	}
}
 80007da:	bf00      	nop
 80007dc:	371c      	adds	r7, #28
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr
 80007e4:	40023800 	.word	0x40023800
 80007e8:	40013800 	.word	0x40013800
 80007ec:	40013c00 	.word	0x40013c00

080007f0 <GPIO_ReadFromInputPin>:
 *
 * @return			- 0 or 1
 *
 * @Note			- none
*/
uint8_t GPIO_ReadFromInputPin (GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
 80007f8:	460b      	mov	r3, r1
 80007fa:	70fb      	strb	r3, [r7, #3]

	uint8_t value;
	value = ((pGPIOx->IDR >> PinNumber) & 0x00000001);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	691a      	ldr	r2, [r3, #16]
 8000800:	78fb      	ldrb	r3, [r7, #3]
 8000802:	fa22 f303 	lsr.w	r3, r2, r3
 8000806:	b2db      	uxtb	r3, r3
 8000808:	f003 0301 	and.w	r3, r3, #1
 800080c:	73fb      	strb	r3, [r7, #15]
	return value;
 800080e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000810:	4618      	mov	r0, r3
 8000812:	3714      	adds	r7, #20
 8000814:	46bd      	mov	sp, r7
 8000816:	bc80      	pop	{r7}
 8000818:	4770      	bx	lr

0800081a <GPIO_Toggle>:
 *
 * @return			- none
 *
 * @Note			- none
*/
void GPIO_Toggle (GPIO_RegDef_t *pGPIOx, uint8_t PinNumber) {
 800081a:	b480      	push	{r7}
 800081c:	b083      	sub	sp, #12
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
 8000822:	460b      	mov	r3, r1
 8000824:	70fb      	strb	r3, [r7, #3]

	pGPIOx->ODR ^= (1 << PinNumber);
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	695b      	ldr	r3, [r3, #20]
 800082a:	78fa      	ldrb	r2, [r7, #3]
 800082c:	2101      	movs	r1, #1
 800082e:	fa01 f202 	lsl.w	r2, r1, r2
 8000832:	405a      	eors	r2, r3
 8000834:	687b      	ldr	r3, [r7, #4]
 8000836:	615a      	str	r2, [r3, #20]
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr
	...

08000844 <__libc_init_array>:
 8000844:	b570      	push	{r4, r5, r6, lr}
 8000846:	4d0d      	ldr	r5, [pc, #52]	; (800087c <__libc_init_array+0x38>)
 8000848:	4c0d      	ldr	r4, [pc, #52]	; (8000880 <__libc_init_array+0x3c>)
 800084a:	1b64      	subs	r4, r4, r5
 800084c:	10a4      	asrs	r4, r4, #2
 800084e:	2600      	movs	r6, #0
 8000850:	42a6      	cmp	r6, r4
 8000852:	d109      	bne.n	8000868 <__libc_init_array+0x24>
 8000854:	4d0b      	ldr	r5, [pc, #44]	; (8000884 <__libc_init_array+0x40>)
 8000856:	4c0c      	ldr	r4, [pc, #48]	; (8000888 <__libc_init_array+0x44>)
 8000858:	f000 f818 	bl	800088c <_init>
 800085c:	1b64      	subs	r4, r4, r5
 800085e:	10a4      	asrs	r4, r4, #2
 8000860:	2600      	movs	r6, #0
 8000862:	42a6      	cmp	r6, r4
 8000864:	d105      	bne.n	8000872 <__libc_init_array+0x2e>
 8000866:	bd70      	pop	{r4, r5, r6, pc}
 8000868:	f855 3b04 	ldr.w	r3, [r5], #4
 800086c:	4798      	blx	r3
 800086e:	3601      	adds	r6, #1
 8000870:	e7ee      	b.n	8000850 <__libc_init_array+0xc>
 8000872:	f855 3b04 	ldr.w	r3, [r5], #4
 8000876:	4798      	blx	r3
 8000878:	3601      	adds	r6, #1
 800087a:	e7f2      	b.n	8000862 <__libc_init_array+0x1e>
 800087c:	080008a4 	.word	0x080008a4
 8000880:	080008a4 	.word	0x080008a4
 8000884:	080008a4 	.word	0x080008a4
 8000888:	080008a8 	.word	0x080008a8

0800088c <_init>:
 800088c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800088e:	bf00      	nop
 8000890:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000892:	bc08      	pop	{r3}
 8000894:	469e      	mov	lr, r3
 8000896:	4770      	bx	lr

08000898 <_fini>:
 8000898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800089a:	bf00      	nop
 800089c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800089e:	bc08      	pop	{r3}
 80008a0:	469e      	mov	lr, r3
 80008a2:	4770      	bx	lr
